[
  {
    "objectID": "2022/Day 2.html",
    "href": "2022/Day 2.html",
    "title": "Day 2 - Rock Paper Scissors",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: Xfor Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide.\nFor example, suppose you were given the following strategy guide:\nA Y\nB X\nC Z\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1(1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6.\n\nIn this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\nWhat would your total score be if everything goes exactly according to your strategy guide?\n\n\n\nread_lines(\"input22022.txt\") |&gt;\n  as_tibble() -&gt; strategy\nstrategy\n\n# A tibble: 2,500 × 1\n   value\n   &lt;chr&gt;\n 1 B Y  \n 2 A Z  \n 3 A Z  \n 4 B Y  \n 5 A Z  \n 6 B X  \n 7 A X  \n 8 A Z  \n 9 C X  \n10 A Z  \n# ℹ 2,490 more rows\n\n\n\n\n\n\nstrategy |&gt;\n  separate(col = value, into = c(\"col1\", \"col2\"), sep = \" \") -&gt; strategy1\nstrategy1\n\n# A tibble: 2,500 × 2\n   col1  col2 \n   &lt;chr&gt; &lt;chr&gt;\n 1 B     Y    \n 2 A     Z    \n 3 A     Z    \n 4 B     Y    \n 5 A     Z    \n 6 B     X    \n 7 A     X    \n 8 A     Z    \n 9 C     X    \n10 A     Z    \n# ℹ 2,490 more rows\n\n\n\nstrategy1 |&gt;\n  mutate(score1 = case_when(\n    col1 == \"A\" ~ \"1\",  \n    col1 == \"B\" ~ \"2\",  \n    col1 == \"C\" ~ \"3\")) |&gt;\n  mutate(score2 = case_when(\n    col2 == \"X\" ~ \"1\",  \n    col2 == \"Y\" ~ \"2\",  \n    col2 == \"Z\" ~ \"3\")) -&gt; strategy2\nstrategy2\n\n# A tibble: 2,500 × 4\n   col1  col2  score1 score2\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; \n 1 B     Y     2      2     \n 2 A     Z     1      3     \n 3 A     Z     1      3     \n 4 B     Y     2      2     \n 5 A     Z     1      3     \n 6 B     X     2      1     \n 7 A     X     1      1     \n 8 A     Z     1      3     \n 9 C     X     3      1     \n10 A     Z     1      3     \n# ℹ 2,490 more rows\n\n\n\nstrategy2 |&gt;\n  mutate(object1 = case_when(\n    col1 == \"A\" ~ \"rock\",  \n    col1 == \"B\" ~ \"paper\",  \n    col1 == \"C\" ~ \"scissors\")) |&gt;\n  mutate(object2 = case_when(\n    col2 == \"X\" ~ \"rock\",  \n    col2 == \"Y\" ~ \"paper\",  \n    col2 == \"Z\" ~ \"scissors\")) -&gt; strategy3\nstrategy3\n\n# A tibble: 2,500 × 6\n   col1  col2  score1 score2 object1  object2 \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   \n 1 B     Y     2      2      paper    paper   \n 2 A     Z     1      3      rock     scissors\n 3 A     Z     1      3      rock     scissors\n 4 B     Y     2      2      paper    paper   \n 5 A     Z     1      3      rock     scissors\n 6 B     X     2      1      paper    rock    \n 7 A     X     1      1      rock     rock    \n 8 A     Z     1      3      rock     scissors\n 9 C     X     3      1      scissors rock    \n10 A     Z     1      3      rock     scissors\n# ℹ 2,490 more rows\n\n\n\nstrategy3 |&gt;\n  mutate(\n    score1 = as.numeric(score1),\n    score2 = as.numeric(score2)) |&gt;\n    mutate(points1 = case_when(\n      object1 == \"scissors\" & object2 == \"rock\" ~ 6,\n      object1 == \"scissors\" & object2 == \"paper\" ~ 0,\n      object1 == \"paper\" & object2 == \"rock\" ~ 0,\n      object1 == \"paper\" & object2 == \"scissors\" ~ 6,\n      object1 == \"rock\" & object2 == \"paper\" ~ 6,\n      object1 == \"rock\" & object2 == \"scissors\" ~ 0,\n      object1 == \"rock\" & object2 == \"rock\" ~ 3,\n      object1 == \"scissors\" & object2 == \"scissors\" ~ 3,\n      object1 == \"paper\" & object2 == \"paper\" ~ 3)) -&gt; strategy6\nstrategy6\n\n# A tibble: 2,500 × 7\n   col1  col2  score1 score2 object1  object2  points1\n   &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;\n 1 B     Y          2      2 paper    paper          3\n 2 A     Z          1      3 rock     scissors       0\n 3 A     Z          1      3 rock     scissors       0\n 4 B     Y          2      2 paper    paper          3\n 5 A     Z          1      3 rock     scissors       0\n 6 B     X          2      1 paper    rock           0\n 7 A     X          1      1 rock     rock           3\n 8 A     Z          1      3 rock     scissors       0\n 9 C     X          3      1 scissors rock           6\n10 A     Z          1      3 rock     scissors       0\n# ℹ 2,490 more rows\n\n\n\nstrategy6 |&gt;\n  mutate(total = points1 + score2) -&gt; strategy7\nstrategy7\n\n# A tibble: 2,500 × 8\n   col1  col2  score1 score2 object1  object2  points1 total\n   &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1 B     Y          2      2 paper    paper          3     5\n 2 A     Z          1      3 rock     scissors       0     3\n 3 A     Z          1      3 rock     scissors       0     3\n 4 B     Y          2      2 paper    paper          3     5\n 5 A     Z          1      3 rock     scissors       0     3\n 6 B     X          2      1 paper    rock           0     1\n 7 A     X          1      1 rock     rock           3     4\n 8 A     Z          1      3 rock     scissors       0     3\n 9 C     X          3      1 scissors rock           6     7\n10 A     Z          1      3 rock     scissors       0     3\n# ℹ 2,490 more rows\n\n\n\nstrategy7 |&gt;\n  summarise(totsum = sum(total))\n\n# A tibble: 1 × 1\n  totsum\n   &lt;dbl&gt;\n1  10310"
  },
  {
    "objectID": "2022/Day 2.html#challenge-part-1",
    "href": "2022/Day 2.html#challenge-part-1",
    "title": "Day 2 - Rock Paper Scissors",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: Xfor Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide.\nFor example, suppose you were given the following strategy guide:\nA Y\nB X\nC Z\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1(1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6.\n\nIn this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\nWhat would your total score be if everything goes exactly according to your strategy guide?\n\n\n\nread_lines(\"input22022.txt\") |&gt;\n  as_tibble() -&gt; strategy\nstrategy\n\n# A tibble: 2,500 × 1\n   value\n   &lt;chr&gt;\n 1 B Y  \n 2 A Z  \n 3 A Z  \n 4 B Y  \n 5 A Z  \n 6 B X  \n 7 A X  \n 8 A Z  \n 9 C X  \n10 A Z  \n# ℹ 2,490 more rows\n\n\n\n\n\n\nstrategy |&gt;\n  separate(col = value, into = c(\"col1\", \"col2\"), sep = \" \") -&gt; strategy1\nstrategy1\n\n# A tibble: 2,500 × 2\n   col1  col2 \n   &lt;chr&gt; &lt;chr&gt;\n 1 B     Y    \n 2 A     Z    \n 3 A     Z    \n 4 B     Y    \n 5 A     Z    \n 6 B     X    \n 7 A     X    \n 8 A     Z    \n 9 C     X    \n10 A     Z    \n# ℹ 2,490 more rows\n\n\n\nstrategy1 |&gt;\n  mutate(score1 = case_when(\n    col1 == \"A\" ~ \"1\",  \n    col1 == \"B\" ~ \"2\",  \n    col1 == \"C\" ~ \"3\")) |&gt;\n  mutate(score2 = case_when(\n    col2 == \"X\" ~ \"1\",  \n    col2 == \"Y\" ~ \"2\",  \n    col2 == \"Z\" ~ \"3\")) -&gt; strategy2\nstrategy2\n\n# A tibble: 2,500 × 4\n   col1  col2  score1 score2\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; \n 1 B     Y     2      2     \n 2 A     Z     1      3     \n 3 A     Z     1      3     \n 4 B     Y     2      2     \n 5 A     Z     1      3     \n 6 B     X     2      1     \n 7 A     X     1      1     \n 8 A     Z     1      3     \n 9 C     X     3      1     \n10 A     Z     1      3     \n# ℹ 2,490 more rows\n\n\n\nstrategy2 |&gt;\n  mutate(object1 = case_when(\n    col1 == \"A\" ~ \"rock\",  \n    col1 == \"B\" ~ \"paper\",  \n    col1 == \"C\" ~ \"scissors\")) |&gt;\n  mutate(object2 = case_when(\n    col2 == \"X\" ~ \"rock\",  \n    col2 == \"Y\" ~ \"paper\",  \n    col2 == \"Z\" ~ \"scissors\")) -&gt; strategy3\nstrategy3\n\n# A tibble: 2,500 × 6\n   col1  col2  score1 score2 object1  object2 \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   \n 1 B     Y     2      2      paper    paper   \n 2 A     Z     1      3      rock     scissors\n 3 A     Z     1      3      rock     scissors\n 4 B     Y     2      2      paper    paper   \n 5 A     Z     1      3      rock     scissors\n 6 B     X     2      1      paper    rock    \n 7 A     X     1      1      rock     rock    \n 8 A     Z     1      3      rock     scissors\n 9 C     X     3      1      scissors rock    \n10 A     Z     1      3      rock     scissors\n# ℹ 2,490 more rows\n\n\n\nstrategy3 |&gt;\n  mutate(\n    score1 = as.numeric(score1),\n    score2 = as.numeric(score2)) |&gt;\n    mutate(points1 = case_when(\n      object1 == \"scissors\" & object2 == \"rock\" ~ 6,\n      object1 == \"scissors\" & object2 == \"paper\" ~ 0,\n      object1 == \"paper\" & object2 == \"rock\" ~ 0,\n      object1 == \"paper\" & object2 == \"scissors\" ~ 6,\n      object1 == \"rock\" & object2 == \"paper\" ~ 6,\n      object1 == \"rock\" & object2 == \"scissors\" ~ 0,\n      object1 == \"rock\" & object2 == \"rock\" ~ 3,\n      object1 == \"scissors\" & object2 == \"scissors\" ~ 3,\n      object1 == \"paper\" & object2 == \"paper\" ~ 3)) -&gt; strategy6\nstrategy6\n\n# A tibble: 2,500 × 7\n   col1  col2  score1 score2 object1  object2  points1\n   &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;\n 1 B     Y          2      2 paper    paper          3\n 2 A     Z          1      3 rock     scissors       0\n 3 A     Z          1      3 rock     scissors       0\n 4 B     Y          2      2 paper    paper          3\n 5 A     Z          1      3 rock     scissors       0\n 6 B     X          2      1 paper    rock           0\n 7 A     X          1      1 rock     rock           3\n 8 A     Z          1      3 rock     scissors       0\n 9 C     X          3      1 scissors rock           6\n10 A     Z          1      3 rock     scissors       0\n# ℹ 2,490 more rows\n\n\n\nstrategy6 |&gt;\n  mutate(total = points1 + score2) -&gt; strategy7\nstrategy7\n\n# A tibble: 2,500 × 8\n   col1  col2  score1 score2 object1  object2  points1 total\n   &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1 B     Y          2      2 paper    paper          3     5\n 2 A     Z          1      3 rock     scissors       0     3\n 3 A     Z          1      3 rock     scissors       0     3\n 4 B     Y          2      2 paper    paper          3     5\n 5 A     Z          1      3 rock     scissors       0     3\n 6 B     X          2      1 paper    rock           0     1\n 7 A     X          1      1 rock     rock           3     4\n 8 A     Z          1      3 rock     scissors       0     3\n 9 C     X          3      1 scissors rock           6     7\n10 A     Z          1      3 rock     scissors       0     3\n# ℹ 2,490 more rows\n\n\n\nstrategy7 |&gt;\n  summarise(totsum = sum(total))\n\n# A tibble: 1 × 1\n  totsum\n   &lt;dbl&gt;\n1  10310"
  },
  {
    "objectID": "2022/Day 2.html#challenge-part-2",
    "href": "2022/Day 2.html#challenge-part-2",
    "title": "Day 2 - Rock Paper Scissors",
    "section": "Challenge Part 2",
    "text": "Challenge Part 2\nThe Elf finishes helping with the tent and sneaks back over to you. “Anyway, the second column says how the round needs to end: X means you need to lose, Y means you need to end the round in a draw, and Z means you need to win. Good luck!”\nThe total score is still calculated in the same way, but now you need to figure out what shape to choose so the round ends as indicated. The example above now goes like this:\n\nIn the first round, your opponent will choose Rock (A), and you need the round to end in a draw (Y), so you also choose Rock. This gives you a score of 1 + 3 = 4.\nIn the second round, your opponent will choose Paper (B), and you choose Rock so you lose (X) with a score of 1 + 0 = 1.\nIn the third round, you will defeat your opponent’s Scissors with Rock for a score of 1 + 6 = 7.\n\nNow that you’re correctly decrypting the ultra top secret strategy guide, you would get a total score of 12.\nFollowing the Elf’s instructions for the second column, what would your total score be if everything goes exactly according to your strategy guide?\n\nRunning code\n\nstrategy2\n\n# A tibble: 2,500 × 4\n   col1  col2  score1 score2\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; \n 1 B     Y     2      2     \n 2 A     Z     1      3     \n 3 A     Z     1      3     \n 4 B     Y     2      2     \n 5 A     Z     1      3     \n 6 B     X     2      1     \n 7 A     X     1      1     \n 8 A     Z     1      3     \n 9 C     X     3      1     \n10 A     Z     1      3     \n# ℹ 2,490 more rows\n\n\n\nstrategy2 |&gt;\n  mutate(object1 = case_when(\n    col1 == \"A\" ~ \"rock\",  \n    col1 == \"B\" ~ \"paper\",  \n    col1 == \"C\" ~ \"scissors\")) |&gt;\n  mutate(object2 = case_when(\n    col2 == \"X\" ~ \"lose\",  \n    col2 == \"Y\" ~ \"raw\",  \n    col2 == \"Z\" ~ \"win\")) -&gt; strateg1\nstrateg1\n\n# A tibble: 2,500 × 6\n   col1  col2  score1 score2 object1  object2\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;  \n 1 B     Y     2      2      paper    raw    \n 2 A     Z     1      3      rock     win    \n 3 A     Z     1      3      rock     win    \n 4 B     Y     2      2      paper    raw    \n 5 A     Z     1      3      rock     win    \n 6 B     X     2      1      paper    lose   \n 7 A     X     1      1      rock     lose   \n 8 A     Z     1      3      rock     win    \n 9 C     X     3      1      scissors lose   \n10 A     Z     1      3      rock     win    \n# ℹ 2,490 more rows\n\n\n\nstrateg1 |&gt;\n  mutate(score = case_when(\n    object2 == \"raw\" ~ \"3\",  \n    object2 == \"win\" ~ \"6\",  \n    object2 == \"lose\" ~ \"0\")) -&gt; strateg2\nstrateg2\n\n# A tibble: 2,500 × 7\n   col1  col2  score1 score2 object1  object2 score\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;\n 1 B     Y     2      2      paper    raw     3    \n 2 A     Z     1      3      rock     win     6    \n 3 A     Z     1      3      rock     win     6    \n 4 B     Y     2      2      paper    raw     3    \n 5 A     Z     1      3      rock     win     6    \n 6 B     X     2      1      paper    lose    0    \n 7 A     X     1      1      rock     lose    0    \n 8 A     Z     1      3      rock     win     6    \n 9 C     X     3      1      scissors lose    0    \n10 A     Z     1      3      rock     win     6    \n# ℹ 2,490 more rows\n\n\n\nstrateg2 |&gt;\n  mutate(object3 = case_when(\n    score == \"3\" ~ object1,\n    score == \"0\" ~ ifelse(object1 == \"paper\", \"rock\",\n                          ifelse(object1 == \"scissors\", \"paper\",\n                                 ifelse(object1 == \"rock\", \"scissors\", NA))),\n    score == \"6\" ~ ifelse(object1 == \"paper\", \"scissors\",\n                          ifelse(object1 == \"scissors\", \"rock\",\n                                 ifelse(object1 == \"rock\", \"paper\", NA))))) -&gt;strateg3\nstrateg3\n\n# A tibble: 2,500 × 8\n   col1  col2  score1 score2 object1  object2 score object3 \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   \n 1 B     Y     2      2      paper    raw     3     paper   \n 2 A     Z     1      3      rock     win     6     paper   \n 3 A     Z     1      3      rock     win     6     paper   \n 4 B     Y     2      2      paper    raw     3     paper   \n 5 A     Z     1      3      rock     win     6     paper   \n 6 B     X     2      1      paper    lose    0     rock    \n 7 A     X     1      1      rock     lose    0     scissors\n 8 A     Z     1      3      rock     win     6     paper   \n 9 C     X     3      1      scissors lose    0     paper   \n10 A     Z     1      3      rock     win     6     paper   \n# ℹ 2,490 more rows\n\n\n\nstrateg3 |&gt;\n  mutate(total1 = case_when(\n    object3 == \"paper\" ~ \"2\",  \n    object3 == \"rock\" ~ \"1\",  \n    object3 == \"scissors\" ~ \"3\")) -&gt; strateg4\nstrateg4\n\n# A tibble: 2,500 × 9\n   col1  col2  score1 score2 object1  object2 score object3  total1\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; \n 1 B     Y     2      2      paper    raw     3     paper    2     \n 2 A     Z     1      3      rock     win     6     paper    2     \n 3 A     Z     1      3      rock     win     6     paper    2     \n 4 B     Y     2      2      paper    raw     3     paper    2     \n 5 A     Z     1      3      rock     win     6     paper    2     \n 6 B     X     2      1      paper    lose    0     rock     1     \n 7 A     X     1      1      rock     lose    0     scissors 3     \n 8 A     Z     1      3      rock     win     6     paper    2     \n 9 C     X     3      1      scissors lose    0     paper    2     \n10 A     Z     1      3      rock     win     6     paper    2     \n# ℹ 2,490 more rows\n\n\n\nstrateg4 |&gt;\n  mutate(\n    score = as.numeric(score),\n    total1 = as.numeric(total1)) |&gt;\n  mutate(totalf = total1 + score) |&gt;\n  summarise(sum(totalf))\n\n# A tibble: 1 × 1\n  `sum(totalf)`\n          &lt;dbl&gt;\n1         14859"
  },
  {
    "objectID": "2022/Day 3.html",
    "href": "2022/Day 3.html",
    "title": "Day 3 - Rucksack Reorganization",
    "section": "",
    "text": "One Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn’t quite follow the packing instructions, and so a few items now need to be rearranged.\nEach rucksack has two large compartments. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.\nThe Elves have made a list of all of the items currently in each rucksack (your puzzle input), but they need your help finding the errors. Every item type is identified by a single lowercase or uppercase letter (that is, aand A refer to different types of items).\nThe list of items for each rucksack is given as characters all on a single line. A given rucksack always has the same number of items in each of its two compartments, so the first half of the characters represent items in the first compartment, while the second half of the characters represent items in the second compartment.\nFor example, suppose you have the following list of contents from six rucksacks:\nvJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw\n\nThe first rucksack contains the items vJrwpWtwJgWrhcsFMMfFFhFp, which means its first compartment contains the items vJrwpWtwJgWr, while the second compartment contains the items hcsFMMfFFhFp. The only item type that appears in both compartments is lowercase p.\nThe second rucksack’s compartments contain jqHRNqRjqzjGDLGL and rsFMfFZSrLrFZsSL. The only item type that appears in both compartments is uppercase L.\nThe third rucksack’s compartments contain PmmdzqPrV and vPwwTWBwg; the only common item type is uppercase P.\nThe fourth rucksack’s compartments only share item type v.\nThe fifth rucksack’s compartments only share item type t.\nThe sixth rucksack’s compartments only share item type s.\n\nTo help prioritize item rearrangement, every item type can be converted to a priority:\n\nLowercase item types a through z have priorities 1 through 26.\nUppercase item types A through Z have priorities 27 through 52.\n\nIn the above example, the priority of the item type that appears in both compartments of each rucksack is 16 (p), 38 (L), 42 (P), 22 (v), 20 (t), and 19 (s); the sum of these is 157.\nFind the item type that appears in both compartments of each rucksack. What is the sum of the priorities of those item types?\n\n\n\nsuppressWarnings(read_lines(\"input32022.txt\")) |&gt;\n  as_tibble() -&gt; rucksack\nrucksack\n\n# A tibble: 301 × 1\n   value                                         \n   &lt;chr&gt;                                         \n 1 jLnFTjhwFTLFDGDDvLgvDssBJBbVRNZJPPJBGzBNRVJNRB\n 2 QWmffSmMZCfWrmHlCflQWfSNBpVBNbPSbbJNppcVVzzpcp\n 3 lflrqrWMmfdMlrtWWmZgDjsqwFwhFDsngnvhqs        \n 4 CNBGwsWVsdWDNCCVvfPLfQfgZHPBvpgf              \n 5 qhJqJlmcFnhJclllPgZjvpHpvfZpPbLn              \n 6 lpMJJhhcSMDMMwws                              \n 7 jphtLMfVpjJRjJscMJptssnrwdNwQrNbwNzQTbcNrwQT  \n 8 gSPPSqGGGrdLrNQGrr                            \n 9 PvWPDvWWCSSBBZPjLVDfhjsLLsDhtR                \n10 hlLwDGLNnTrbNdtbdb                            \n# ℹ 291 more rows\n\n\n\n\n\n\nrucksack |&gt;\n  mutate(mid = nchar(value),\n         mid2 = mid/2) |&gt;\n  mutate(first_half = substr(value, 1, mid2),\n         second_half = str_sub(value, -mid2)) -&gt; half\nhalf\n\n# A tibble: 301 × 5\n   value                                        mid  mid2 first_half second_half\n   &lt;chr&gt;                                      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n 1 jLnFTjhwFTLFDGDDvLgvDssBJBbVRNZJPPJBGzBNR…    46    23 jLnFTjhwF… BJBbVRNZJP…\n 2 QWmffSmMZCfWrmHlCflQWfSNBpVBNbPSbbJNppcVV…    46    23 QWmffSmMZ… NBpVBNbPSb…\n 3 lflrqrWMmfdMlrtWWmZgDjsqwFwhFDsngnvhqs        38    19 lflrqrWMm… gDjsqwFwhF…\n 4 CNBGwsWVsdWDNCCVvfPLfQfgZHPBvpgf              32    16 CNBGwsWVs… vfPLfQfgZH…\n 5 qhJqJlmcFnhJclllPgZjvpHpvfZpPbLn              32    16 qhJqJlmcF… PgZjvpHpvf…\n 6 lpMJJhhcSMDMMwws                              16     8 lpMJJhhc   SMDMMwws   \n 7 jphtLMfVpjJRjJscMJptssnrwdNwQrNbwNzQTbcNr…    44    22 jphtLMfVp… nrwdNwQrNb…\n 8 gSPPSqGGGrdLrNQGrr                            18     9 gSPPSqGGG  rdLrNQGrr  \n 9 PvWPDvWWCSSBBZPjLVDfhjsLLsDhtR                30    15 PvWPDvWWC… jLVDfhjsLL…\n10 hlLwDGLNnTrbNdtbdb                            18     9 hlLwDGLNn  TrbNdtbdb  \n# ℹ 291 more rows\n\n\n\nhalf |&gt;\n  mutate(lettres_communes = map2_chr(first_half, second_half, ~\n    paste(sort(intersect(strsplit(.x, \"\")[[1]], strsplit(.y, \"\")[[1]])), collapse = \"\")\n  )) -&gt; half2\nhalf2\n\n# A tibble: 301 × 6\n   value                       mid  mid2 first_half second_half lettres_communes\n   &lt;chr&gt;                     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;           \n 1 jLnFTjhwFTLFDGDDvLgvDssB…    46    23 jLnFTjhwF… BJBbVRNZJP… G               \n 2 QWmffSmMZCfWrmHlCflQWfSN…    46    23 QWmffSmMZ… NBpVBNbPSb… S               \n 3 lflrqrWMmfdMlrtWWmZgDjsq…    38    19 lflrqrWMm… gDjsqwFwhF… q               \n 4 CNBGwsWVsdWDNCCVvfPLfQfg…    32    16 CNBGwsWVs… vfPLfQfgZH… B               \n 5 qhJqJlmcFnhJclllPgZjvpHp…    32    16 qhJqJlmcF… PgZjvpHpvf… n               \n 6 lpMJJhhcSMDMMwws             16     8 lpMJJhhc   SMDMMwws    M               \n 7 jphtLMfVpjJRjJscMJptssnr…    44    22 jphtLMfVp… nrwdNwQrNb… c               \n 8 gSPPSqGGGrdLrNQGrr           18     9 gSPPSqGGG  rdLrNQGrr   G               \n 9 PvWPDvWWCSSBBZPjLVDfhjsL…    30    15 PvWPDvWWC… jLVDfhjsLL… D               \n10 hlLwDGLNnTrbNdtbdb           18     9 hlLwDGLNn  TrbNdtbdb   N               \n# ℹ 291 more rows\n\n\n\nhalf2 |&gt;\n  mutate(value = case_when(lettres_communes == \"a\" ~ \"1\",\n                           lettres_communes == \"b\" ~ \"2\",\n                           lettres_communes == \"c\" ~ \"3\",\n                           lettres_communes == \"d\" ~ \"4\",\n                           lettres_communes == \"e\" ~ \"5\",\n                           lettres_communes == \"f\" ~ \"6\",\n                           lettres_communes == \"g\" ~ \"7\",\n                           lettres_communes == \"h\" ~ \"8\",\n                           lettres_communes == \"i\" ~ \"9\",\n                           lettres_communes == \"j\" ~ \"10\",\n                           lettres_communes == \"k\" ~ \"11\",\n                           lettres_communes == \"l\" ~ \"12\",\n                           lettres_communes == \"m\" ~ \"13\",\n                           lettres_communes == \"n\" ~ \"14\",\n                           lettres_communes == \"o\" ~ \"15\",\n                           lettres_communes == \"p\" ~ \"16\",\n                           lettres_communes == \"q\" ~ \"17\",\n                           lettres_communes == \"r\" ~ \"18\",\n                           lettres_communes == \"s\" ~ \"19\",\n                           lettres_communes == \"t\" ~ \"20\",\n                           lettres_communes == \"u\" ~ \"21\",\n                           lettres_communes == \"v\" ~ \"22\",\n                           lettres_communes == \"w\" ~ \"23\",\n                           lettres_communes == \"x\" ~ \"24\",\n                           lettres_communes == \"y\" ~ \"25\",\n                           lettres_communes == \"z\" ~ \"26\",\n                           lettres_communes == \"A\" ~ \"27\",\n                           lettres_communes == \"B\" ~ \"28\",\n                           lettres_communes == \"C\" ~ \"29\",\n                           lettres_communes == \"D\" ~ \"30\",\n                           lettres_communes == \"E\" ~ \"31\",\n                           lettres_communes == \"F\" ~ \"32\",\n                           lettres_communes == \"G\" ~ \"33\",\n                           lettres_communes == \"H\" ~ \"34\",\n                           lettres_communes == \"I\" ~ \"35\",\n                           lettres_communes == \"J\" ~ \"36\",\n                           lettres_communes == \"K\" ~ \"37\",\n                           lettres_communes == \"L\" ~ \"38\",\n                           lettres_communes == \"M\" ~ \"39\",\n                           lettres_communes == \"N\" ~ \"40\",\n                           lettres_communes == \"O\" ~ \"41\",\n                           lettres_communes == \"P\" ~ \"42\",\n                           lettres_communes == \"Q\" ~ \"43\",\n                           lettres_communes == \"R\" ~ \"44\",\n                           lettres_communes == \"S\" ~ \"45\",\n                           lettres_communes == \"T\" ~ \"46\",\n                           lettres_communes == \"U\" ~ \"47\",\n                           lettres_communes == \"V\" ~ \"48\",\n                           lettres_communes == \"W\" ~ \"49\",\n                           lettres_communes == \"X\" ~ \"50\",\n                           lettres_communes == \"Y\" ~ \"51\",\n                           lettres_communes == \"Z\" ~ \"52\")) -&gt; values\nvalues\n\n# A tibble: 301 × 6\n   value   mid  mid2 first_half              second_half        lettres_communes\n   &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;                   &lt;chr&gt;              &lt;chr&gt;           \n 1 33       46    23 jLnFTjhwFTLFDGDDvLgvDss BJBbVRNZJPPJBGzBN… G               \n 2 45       46    23 QWmffSmMZCfWrmHlCflQWfS NBpVBNbPSbbJNppcV… S               \n 3 17       38    19 lflrqrWMmfdMlrtWWmZ     gDjsqwFwhFDsngnvh… q               \n 4 28       32    16 CNBGwsWVsdWDNCCV        vfPLfQfgZHPBvpgf   B               \n 5 14       32    16 qhJqJlmcFnhJclll        PgZjvpHpvfZpPbLn   n               \n 6 39       16     8 lpMJJhhc                SMDMMwws           M               \n 7 3        44    22 jphtLMfVpjJRjJscMJptss  nrwdNwQrNbwNzQTbc… c               \n 8 33       18     9 gSPPSqGGG               rdLrNQGrr          G               \n 9 30       30    15 PvWPDvWWCSSBBZP         jLVDfhjsLLsDhtR    D               \n10 40       18     9 hlLwDGLNn               TrbNdtbdb          N               \n# ℹ 291 more rows\n\n\n\nas.numeric(values$value) |&gt;\n  as.tibble() -&gt; chiffres\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\nchiffres\n\n# A tibble: 301 × 1\n   value\n   &lt;dbl&gt;\n 1    33\n 2    45\n 3    17\n 4    28\n 5    14\n 6    39\n 7     3\n 8    33\n 9    30\n10    40\n# ℹ 291 more rows\n\n\n\nchiffres |&gt;\n  drop_na() |&gt;\n  summarise(sum(value))\n\n# A tibble: 1 × 1\n  `sum(value)`\n         &lt;dbl&gt;\n1         7903"
  },
  {
    "objectID": "2022/Day 3.html#challenge-part-1",
    "href": "2022/Day 3.html#challenge-part-1",
    "title": "Day 3 - Rucksack Reorganization",
    "section": "",
    "text": "One Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn’t quite follow the packing instructions, and so a few items now need to be rearranged.\nEach rucksack has two large compartments. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.\nThe Elves have made a list of all of the items currently in each rucksack (your puzzle input), but they need your help finding the errors. Every item type is identified by a single lowercase or uppercase letter (that is, aand A refer to different types of items).\nThe list of items for each rucksack is given as characters all on a single line. A given rucksack always has the same number of items in each of its two compartments, so the first half of the characters represent items in the first compartment, while the second half of the characters represent items in the second compartment.\nFor example, suppose you have the following list of contents from six rucksacks:\nvJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw\n\nThe first rucksack contains the items vJrwpWtwJgWrhcsFMMfFFhFp, which means its first compartment contains the items vJrwpWtwJgWr, while the second compartment contains the items hcsFMMfFFhFp. The only item type that appears in both compartments is lowercase p.\nThe second rucksack’s compartments contain jqHRNqRjqzjGDLGL and rsFMfFZSrLrFZsSL. The only item type that appears in both compartments is uppercase L.\nThe third rucksack’s compartments contain PmmdzqPrV and vPwwTWBwg; the only common item type is uppercase P.\nThe fourth rucksack’s compartments only share item type v.\nThe fifth rucksack’s compartments only share item type t.\nThe sixth rucksack’s compartments only share item type s.\n\nTo help prioritize item rearrangement, every item type can be converted to a priority:\n\nLowercase item types a through z have priorities 1 through 26.\nUppercase item types A through Z have priorities 27 through 52.\n\nIn the above example, the priority of the item type that appears in both compartments of each rucksack is 16 (p), 38 (L), 42 (P), 22 (v), 20 (t), and 19 (s); the sum of these is 157.\nFind the item type that appears in both compartments of each rucksack. What is the sum of the priorities of those item types?\n\n\n\nsuppressWarnings(read_lines(\"input32022.txt\")) |&gt;\n  as_tibble() -&gt; rucksack\nrucksack\n\n# A tibble: 301 × 1\n   value                                         \n   &lt;chr&gt;                                         \n 1 jLnFTjhwFTLFDGDDvLgvDssBJBbVRNZJPPJBGzBNRVJNRB\n 2 QWmffSmMZCfWrmHlCflQWfSNBpVBNbPSbbJNppcVVzzpcp\n 3 lflrqrWMmfdMlrtWWmZgDjsqwFwhFDsngnvhqs        \n 4 CNBGwsWVsdWDNCCVvfPLfQfgZHPBvpgf              \n 5 qhJqJlmcFnhJclllPgZjvpHpvfZpPbLn              \n 6 lpMJJhhcSMDMMwws                              \n 7 jphtLMfVpjJRjJscMJptssnrwdNwQrNbwNzQTbcNrwQT  \n 8 gSPPSqGGGrdLrNQGrr                            \n 9 PvWPDvWWCSSBBZPjLVDfhjsLLsDhtR                \n10 hlLwDGLNnTrbNdtbdb                            \n# ℹ 291 more rows\n\n\n\n\n\n\nrucksack |&gt;\n  mutate(mid = nchar(value),\n         mid2 = mid/2) |&gt;\n  mutate(first_half = substr(value, 1, mid2),\n         second_half = str_sub(value, -mid2)) -&gt; half\nhalf\n\n# A tibble: 301 × 5\n   value                                        mid  mid2 first_half second_half\n   &lt;chr&gt;                                      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n 1 jLnFTjhwFTLFDGDDvLgvDssBJBbVRNZJPPJBGzBNR…    46    23 jLnFTjhwF… BJBbVRNZJP…\n 2 QWmffSmMZCfWrmHlCflQWfSNBpVBNbPSbbJNppcVV…    46    23 QWmffSmMZ… NBpVBNbPSb…\n 3 lflrqrWMmfdMlrtWWmZgDjsqwFwhFDsngnvhqs        38    19 lflrqrWMm… gDjsqwFwhF…\n 4 CNBGwsWVsdWDNCCVvfPLfQfgZHPBvpgf              32    16 CNBGwsWVs… vfPLfQfgZH…\n 5 qhJqJlmcFnhJclllPgZjvpHpvfZpPbLn              32    16 qhJqJlmcF… PgZjvpHpvf…\n 6 lpMJJhhcSMDMMwws                              16     8 lpMJJhhc   SMDMMwws   \n 7 jphtLMfVpjJRjJscMJptssnrwdNwQrNbwNzQTbcNr…    44    22 jphtLMfVp… nrwdNwQrNb…\n 8 gSPPSqGGGrdLrNQGrr                            18     9 gSPPSqGGG  rdLrNQGrr  \n 9 PvWPDvWWCSSBBZPjLVDfhjsLLsDhtR                30    15 PvWPDvWWC… jLVDfhjsLL…\n10 hlLwDGLNnTrbNdtbdb                            18     9 hlLwDGLNn  TrbNdtbdb  \n# ℹ 291 more rows\n\n\n\nhalf |&gt;\n  mutate(lettres_communes = map2_chr(first_half, second_half, ~\n    paste(sort(intersect(strsplit(.x, \"\")[[1]], strsplit(.y, \"\")[[1]])), collapse = \"\")\n  )) -&gt; half2\nhalf2\n\n# A tibble: 301 × 6\n   value                       mid  mid2 first_half second_half lettres_communes\n   &lt;chr&gt;                     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;           \n 1 jLnFTjhwFTLFDGDDvLgvDssB…    46    23 jLnFTjhwF… BJBbVRNZJP… G               \n 2 QWmffSmMZCfWrmHlCflQWfSN…    46    23 QWmffSmMZ… NBpVBNbPSb… S               \n 3 lflrqrWMmfdMlrtWWmZgDjsq…    38    19 lflrqrWMm… gDjsqwFwhF… q               \n 4 CNBGwsWVsdWDNCCVvfPLfQfg…    32    16 CNBGwsWVs… vfPLfQfgZH… B               \n 5 qhJqJlmcFnhJclllPgZjvpHp…    32    16 qhJqJlmcF… PgZjvpHpvf… n               \n 6 lpMJJhhcSMDMMwws             16     8 lpMJJhhc   SMDMMwws    M               \n 7 jphtLMfVpjJRjJscMJptssnr…    44    22 jphtLMfVp… nrwdNwQrNb… c               \n 8 gSPPSqGGGrdLrNQGrr           18     9 gSPPSqGGG  rdLrNQGrr   G               \n 9 PvWPDvWWCSSBBZPjLVDfhjsL…    30    15 PvWPDvWWC… jLVDfhjsLL… D               \n10 hlLwDGLNnTrbNdtbdb           18     9 hlLwDGLNn  TrbNdtbdb   N               \n# ℹ 291 more rows\n\n\n\nhalf2 |&gt;\n  mutate(value = case_when(lettres_communes == \"a\" ~ \"1\",\n                           lettres_communes == \"b\" ~ \"2\",\n                           lettres_communes == \"c\" ~ \"3\",\n                           lettres_communes == \"d\" ~ \"4\",\n                           lettres_communes == \"e\" ~ \"5\",\n                           lettres_communes == \"f\" ~ \"6\",\n                           lettres_communes == \"g\" ~ \"7\",\n                           lettres_communes == \"h\" ~ \"8\",\n                           lettres_communes == \"i\" ~ \"9\",\n                           lettres_communes == \"j\" ~ \"10\",\n                           lettres_communes == \"k\" ~ \"11\",\n                           lettres_communes == \"l\" ~ \"12\",\n                           lettres_communes == \"m\" ~ \"13\",\n                           lettres_communes == \"n\" ~ \"14\",\n                           lettres_communes == \"o\" ~ \"15\",\n                           lettres_communes == \"p\" ~ \"16\",\n                           lettres_communes == \"q\" ~ \"17\",\n                           lettres_communes == \"r\" ~ \"18\",\n                           lettres_communes == \"s\" ~ \"19\",\n                           lettres_communes == \"t\" ~ \"20\",\n                           lettres_communes == \"u\" ~ \"21\",\n                           lettres_communes == \"v\" ~ \"22\",\n                           lettres_communes == \"w\" ~ \"23\",\n                           lettres_communes == \"x\" ~ \"24\",\n                           lettres_communes == \"y\" ~ \"25\",\n                           lettres_communes == \"z\" ~ \"26\",\n                           lettres_communes == \"A\" ~ \"27\",\n                           lettres_communes == \"B\" ~ \"28\",\n                           lettres_communes == \"C\" ~ \"29\",\n                           lettres_communes == \"D\" ~ \"30\",\n                           lettres_communes == \"E\" ~ \"31\",\n                           lettres_communes == \"F\" ~ \"32\",\n                           lettres_communes == \"G\" ~ \"33\",\n                           lettres_communes == \"H\" ~ \"34\",\n                           lettres_communes == \"I\" ~ \"35\",\n                           lettres_communes == \"J\" ~ \"36\",\n                           lettres_communes == \"K\" ~ \"37\",\n                           lettres_communes == \"L\" ~ \"38\",\n                           lettres_communes == \"M\" ~ \"39\",\n                           lettres_communes == \"N\" ~ \"40\",\n                           lettres_communes == \"O\" ~ \"41\",\n                           lettres_communes == \"P\" ~ \"42\",\n                           lettres_communes == \"Q\" ~ \"43\",\n                           lettres_communes == \"R\" ~ \"44\",\n                           lettres_communes == \"S\" ~ \"45\",\n                           lettres_communes == \"T\" ~ \"46\",\n                           lettres_communes == \"U\" ~ \"47\",\n                           lettres_communes == \"V\" ~ \"48\",\n                           lettres_communes == \"W\" ~ \"49\",\n                           lettres_communes == \"X\" ~ \"50\",\n                           lettres_communes == \"Y\" ~ \"51\",\n                           lettres_communes == \"Z\" ~ \"52\")) -&gt; values\nvalues\n\n# A tibble: 301 × 6\n   value   mid  mid2 first_half              second_half        lettres_communes\n   &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;                   &lt;chr&gt;              &lt;chr&gt;           \n 1 33       46    23 jLnFTjhwFTLFDGDDvLgvDss BJBbVRNZJPPJBGzBN… G               \n 2 45       46    23 QWmffSmMZCfWrmHlCflQWfS NBpVBNbPSbbJNppcV… S               \n 3 17       38    19 lflrqrWMmfdMlrtWWmZ     gDjsqwFwhFDsngnvh… q               \n 4 28       32    16 CNBGwsWVsdWDNCCV        vfPLfQfgZHPBvpgf   B               \n 5 14       32    16 qhJqJlmcFnhJclll        PgZjvpHpvfZpPbLn   n               \n 6 39       16     8 lpMJJhhc                SMDMMwws           M               \n 7 3        44    22 jphtLMfVpjJRjJscMJptss  nrwdNwQrNbwNzQTbc… c               \n 8 33       18     9 gSPPSqGGG               rdLrNQGrr          G               \n 9 30       30    15 PvWPDvWWCSSBBZP         jLVDfhjsLLsDhtR    D               \n10 40       18     9 hlLwDGLNn               TrbNdtbdb          N               \n# ℹ 291 more rows\n\n\n\nas.numeric(values$value) |&gt;\n  as.tibble() -&gt; chiffres\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\nchiffres\n\n# A tibble: 301 × 1\n   value\n   &lt;dbl&gt;\n 1    33\n 2    45\n 3    17\n 4    28\n 5    14\n 6    39\n 7     3\n 8    33\n 9    30\n10    40\n# ℹ 291 more rows\n\n\n\nchiffres |&gt;\n  drop_na() |&gt;\n  summarise(sum(value))\n\n# A tibble: 1 × 1\n  `sum(value)`\n         &lt;dbl&gt;\n1         7903"
  },
  {
    "objectID": "2022/Day 3.html#challenge-part-2",
    "href": "2022/Day 3.html#challenge-part-2",
    "title": "Day 3 - Rucksack Reorganization",
    "section": "Challenge Part 2",
    "text": "Challenge Part 2\nAs you finish identifying the misplaced items, the Elves come to you with another issue.\nFor safety, the Elves are divided into groups of three. Every Elf carries a badge that identifies their group. For efficiency, within each group of three Elves, the badge is the only item type carried by all three Elves. That is, if a group’s badge is item type B, then all three Elves will have item type B somewhere in their rucksack, and at most two of the Elves will be carrying any other item type.\nThe problem is that someone forgot to put this year’s updated authenticity sticker on the badges. All of the badges need to be pulled out of the rucksacks so the new authenticity stickers can be attached.\nAdditionally, nobody wrote down which item type corresponds to each group’s badges. The only way to tell which item type is the right one is by finding the one item type that is common between all three Elves in each group.\nEvery set of three lines in your list corresponds to a single group, but each group can have a different badge item type. So, in the above example, the first group’s rucksacks are the first three lines:\nvJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nAnd the second group’s rucksacks are the next three lines:\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw\nIn the first group, the only item type that appears in all three rucksacks is lowercase r; this must be their badges. In the second group, their badge item type must be Z.\nPriorities for these items must still be found to organize the sticker attachment efforts: here, they are 18 (r) for the first group and 52 (Z) for the second group. The sum of these is 70.\nFind the item type that corresponds to the badges of each three-Elf group. What is the sum of the priorities of those item types?\n\nRunning code\n\nrucksack\n\n# A tibble: 301 × 1\n   value                                         \n   &lt;chr&gt;                                         \n 1 jLnFTjhwFTLFDGDDvLgvDssBJBbVRNZJPPJBGzBNRVJNRB\n 2 QWmffSmMZCfWrmHlCflQWfSNBpVBNbPSbbJNppcVVzzpcp\n 3 lflrqrWMmfdMlrtWWmZgDjsqwFwhFDsngnvhqs        \n 4 CNBGwsWVsdWDNCCVvfPLfQfgZHPBvpgf              \n 5 qhJqJlmcFnhJclllPgZjvpHpvfZpPbLn              \n 6 lpMJJhhcSMDMMwws                              \n 7 jphtLMfVpjJRjJscMJptssnrwdNwQrNbwNzQTbcNrwQT  \n 8 gSPPSqGGGrdLrNQGrr                            \n 9 PvWPDvWWCSSBBZPjLVDfhjsLLsDhtR                \n10 hlLwDGLNnTrbNdtbdb                            \n# ℹ 291 more rows\n\n\n\nrucksack |&gt;\n  mutate(group_id = (row_number() - 1) %/% 3 + 1) |&gt;\n  group_by(group_id) |&gt;\n  summarise(\n    lettres_communes = reduce(strsplit(value, \"\"), intersect) %&gt;% paste(collapse = \"\"))  |&gt;\n  mutate(value = case_when(lettres_communes == \"a\" ~ \"1\",\n                           lettres_communes == \"b\" ~ \"2\",\n                           lettres_communes == \"c\" ~ \"3\",\n                           lettres_communes == \"d\" ~ \"4\",\n                           lettres_communes == \"e\" ~ \"5\",\n                           lettres_communes == \"f\" ~ \"6\",\n                           lettres_communes == \"g\" ~ \"7\",\n                           lettres_communes == \"h\" ~ \"8\",\n                           lettres_communes == \"i\" ~ \"9\",\n                           lettres_communes == \"j\" ~ \"10\",\n                           lettres_communes == \"k\" ~ \"11\",\n                           lettres_communes == \"l\" ~ \"12\",\n                           lettres_communes == \"m\" ~ \"13\",\n                           lettres_communes == \"n\" ~ \"14\",\n                           lettres_communes == \"o\" ~ \"15\",\n                           lettres_communes == \"p\" ~ \"16\",\n                           lettres_communes == \"q\" ~ \"17\",\n                           lettres_communes == \"r\" ~ \"18\",\n                           lettres_communes == \"s\" ~ \"19\",\n                           lettres_communes == \"t\" ~ \"20\",\n                           lettres_communes == \"u\" ~ \"21\",\n                           lettres_communes == \"v\" ~ \"22\",\n                           lettres_communes == \"w\" ~ \"23\",\n                           lettres_communes == \"x\" ~ \"24\",\n                           lettres_communes == \"y\" ~ \"25\",\n                           lettres_communes == \"z\" ~ \"26\",\n                           lettres_communes == \"A\" ~ \"27\",\n                           lettres_communes == \"B\" ~ \"28\",\n                           lettres_communes == \"C\" ~ \"29\",\n                           lettres_communes == \"D\" ~ \"30\",\n                           lettres_communes == \"E\" ~ \"31\",\n                           lettres_communes == \"F\" ~ \"32\",\n                           lettres_communes == \"G\" ~ \"33\",\n                           lettres_communes == \"H\" ~ \"34\",\n                           lettres_communes == \"I\" ~ \"35\",\n                           lettres_communes == \"J\" ~ \"36\",\n                           lettres_communes == \"K\" ~ \"37\",\n                           lettres_communes == \"L\" ~ \"38\",\n                           lettres_communes == \"M\" ~ \"39\",\n                           lettres_communes == \"N\" ~ \"40\",\n                           lettres_communes == \"O\" ~ \"41\",\n                           lettres_communes == \"P\" ~ \"42\",\n                           lettres_communes == \"Q\" ~ \"43\",\n                           lettres_communes == \"R\" ~ \"44\",\n                           lettres_communes == \"S\" ~ \"45\",\n                           lettres_communes == \"T\" ~ \"46\",\n                           lettres_communes == \"U\" ~ \"47\",\n                           lettres_communes == \"V\" ~ \"48\",\n                           lettres_communes == \"W\" ~ \"49\",\n                           lettres_communes == \"X\" ~ \"50\",\n                           lettres_communes == \"Y\" ~ \"51\",\n                           lettres_communes == \"Z\" ~ \"52\")) -&gt; val\nval\n\n# A tibble: 101 × 3\n   group_id lettres_communes value\n      &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;\n 1        1 Z                52   \n 2        2 p                16   \n 3        3 L                38   \n 4        4 b                2    \n 5        5 t                20   \n 6        6 D                30   \n 7        7 v                22   \n 8        8 l                12   \n 9        9 Q                43   \n10       10 r                18   \n# ℹ 91 more rows\n\n\n\nas.numeric(val$value) |&gt;\n  as.tibble() |&gt;\n  drop_na() |&gt;\n  summarise(sum(value))\n\n# A tibble: 1 × 1\n  `sum(value)`\n         &lt;dbl&gt;\n1         2548"
  },
  {
    "objectID": "2023/Jour 1.html",
    "href": "2023/Jour 1.html",
    "title": "Jour 1 - Trebuchet?!",
    "section": "",
    "text": "Something is wrong with global snow production, and you’ve been selected to take a look. The Elves have even given you a map; on it, they’ve used stars to mark the top fifty locations that are likely to be having problems.\nYou’ve been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou try to ask why they can’t just use a weather machine (“not powerful enough”) and where they’re even sending you (“the sky”) and why your map looks mostly blank (“you sure ask a lot of questions”) and hang on did you just say the sky (“of course, where do you think snow comes from”) when you realize that the Elves are already loading you into a trebuchet (“please hold still, we need to strap you in”).\nAs they’re making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\n\n\nread_lines(\"input 1.txt\") |&gt;\n  as.tibble() -&gt; all\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\nall\n\n# A tibble: 1,000 × 1\n   value                                     \n   &lt;chr&gt;                                     \n 1 jjfvnnlfivejj1                            \n 2 6fourfour                                 \n 3 ninevbmltwo69                             \n 4 pcg91vqrfpxxzzzoneightzt                  \n 5 jpprthxgjfive3one1qckhrptpqdc             \n 6 mxphxfnffninethreetdj5jgknqfrxmhxfivexcxqv\n 7 three7pktwo4279z                          \n 8 1qcbszfgonedjcqj66929                     \n 9 fivesixthreeptcqjnkzgdfgzspmlvmmhn3       \n10 vm2sixseven                               \n# ℹ 990 more rows\n\n\n\n\n\n\nall |&gt;\n  mutate(digits = str_extract_all(value, \"\\\\d\") |&gt;\n           map_chr(~ paste(.x, collapse = \"\"))) |&gt;\n  mutate(number = as.numeric(digits)) |&gt;\n  mutate(first_digit = str_sub(number, 1, 1),                                      \n    last_digit = str_sub(number, -1, -1)) |&gt;\n  select(first_digit, last_digit) |&gt;\n  unite(\"sum\", first_digit, last_digit, sep = \"\") |&gt;\n  mutate(sum = as.numeric(sum)) |&gt;\n  summarise(sum(sum))\n\n# A tibble: 1 × 1\n  `sum(sum)`\n       &lt;dbl&gt;\n1      56465"
  },
  {
    "objectID": "2023/Jour 1.html#challenge-part-1",
    "href": "2023/Jour 1.html#challenge-part-1",
    "title": "Jour 1 - Trebuchet?!",
    "section": "",
    "text": "Something is wrong with global snow production, and you’ve been selected to take a look. The Elves have even given you a map; on it, they’ve used stars to mark the top fifty locations that are likely to be having problems.\nYou’ve been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou try to ask why they can’t just use a weather machine (“not powerful enough”) and where they’re even sending you (“the sky”) and why your map looks mostly blank (“you sure ask a lot of questions”) and hang on did you just say the sky (“of course, where do you think snow comes from”) when you realize that the Elves are already loading you into a trebuchet (“please hold still, we need to strap you in”).\nAs they’re making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\n\n\nread_lines(\"input 1.txt\") |&gt;\n  as.tibble() -&gt; all\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\nall\n\n# A tibble: 1,000 × 1\n   value                                     \n   &lt;chr&gt;                                     \n 1 jjfvnnlfivejj1                            \n 2 6fourfour                                 \n 3 ninevbmltwo69                             \n 4 pcg91vqrfpxxzzzoneightzt                  \n 5 jpprthxgjfive3one1qckhrptpqdc             \n 6 mxphxfnffninethreetdj5jgknqfrxmhxfivexcxqv\n 7 three7pktwo4279z                          \n 8 1qcbszfgonedjcqj66929                     \n 9 fivesixthreeptcqjnkzgdfgzspmlvmmhn3       \n10 vm2sixseven                               \n# ℹ 990 more rows\n\n\n\n\n\n\nall |&gt;\n  mutate(digits = str_extract_all(value, \"\\\\d\") |&gt;\n           map_chr(~ paste(.x, collapse = \"\"))) |&gt;\n  mutate(number = as.numeric(digits)) |&gt;\n  mutate(first_digit = str_sub(number, 1, 1),                                      \n    last_digit = str_sub(number, -1, -1)) |&gt;\n  select(first_digit, last_digit) |&gt;\n  unite(\"sum\", first_digit, last_digit, sep = \"\") |&gt;\n  mutate(sum = as.numeric(sum)) |&gt;\n  summarise(sum(sum))\n\n# A tibble: 1 × 1\n  `sum(sum)`\n       &lt;dbl&gt;\n1      56465"
  },
  {
    "objectID": "2022.html",
    "href": "2022.html",
    "title": "2022",
    "section": "",
    "text": "Day 1 - Calorie Counting\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 2 - Rock Paper Scissors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 3 - Rucksack Reorganization\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 4 - Camp Cleanup\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/Day_1.html",
    "href": "2024/Day_1.html",
    "title": "Day 1 - Historian Hysteria",
    "section": "",
    "text": "The Chief Historian is always present for the big Christmas sleigh launch, but nobody has seen him in months! Last anyone heard, he was visiting locations that are historically significant to the North Pole; a group of Senior Historians has asked you to accompany them as they check the places they think he was most likely to visit.\nAs each location is checked, they will mark it on their list with a star. They figure the Chief Historian must be in one of the first fifty places they’ll look, so in order to save Christmas, you need to help them get fifty stars on their list before Santa takes off on December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou haven’t even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently empty. Eventually, someone decides that the best place to check first would be the Chief Historian’s office.\nUpon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?\nThroughout the Chief’s office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don’t miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.\nThere’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?\nFor example:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nMaybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nWithin each pair, figure out how far apart the two numbers are; you’ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.\nIn the example list above, the pairs and distances would be as follows:\n\nThe smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.\nThe second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.\nThe third-smallest number in both lists is 3, so the distance between them is 0.\nThe next numbers to pair up are 3 and 4, a distance of 1.\nThe fifth-smallest numbers in each list are 3 and 5, a distance of 2.\nFinally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.\n\nTo find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\n\n\n\nread_delim(\"input1.txt\", show_col_types = FALSE,\n         col_names = c(\"col1\",\"col3\", \"col4\", \"col2\")) |&gt;\n  select(col1, col2) -&gt; input\ninput\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 38450 56790\n 2 94765 36795\n 3 89694 26251\n 4 96083 99006\n 5 57068 30577\n 6 32031 60133\n 7 97652 26657\n 8 85752 40654\n 9 66117 44144\n10 29274 30512\n# ℹ 990 more rows\n\n\n\n\n\n\ninput |&gt;\n  arrange(col1) |&gt;\n  select(col1) -&gt; input1\ninput1\n\n# A tibble: 1,000 × 1\n    col1\n   &lt;dbl&gt;\n 1 10003\n 2 10072\n 3 10266\n 4 10383\n 5 10483\n 6 10498\n 7 10548\n 8 10589\n 9 10605\n10 10610\n# ℹ 990 more rows\n\n\n\ninput |&gt;\n  arrange(col2) |&gt;\n  select(col2) -&gt; input2\ninput2\n\n# A tibble: 1,000 × 1\n    col2\n   &lt;dbl&gt;\n 1 10051\n 2 10589\n 3 10589\n 4 10638\n 5 10699\n 6 10996\n 7 11025\n 8 11243\n 9 11820\n10 11918\n# ℹ 990 more rows\n\n\n\ninput1 |&gt;\n  mutate(input2, col2) -&gt; input3\ninput3\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051\n 2 10072 10589\n 3 10266 10589\n 4 10383 10638\n 5 10483 10699\n 6 10498 10996\n 7 10548 11025\n 8 10589 11243\n 9 10605 11820\n10 10610 11918\n# ℹ 990 more rows\n\n\n\ninput3 |&gt;\n  mutate(dif = abs(col1 - col2)) -&gt; input4\ninput4\n\n# A tibble: 1,000 × 3\n    col1  col2   dif\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051    48\n 2 10072 10589   517\n 3 10266 10589   323\n 4 10383 10638   255\n 5 10483 10699   216\n 6 10498 10996   498\n 7 10548 11025   477\n 8 10589 11243   654\n 9 10605 11820  1215\n10 10610 11918  1308\n# ℹ 990 more rows\n\n\n\ninput4 |&gt;\n  summarise(total = sum(dif))\n\n# A tibble: 1 × 1\n    total\n    &lt;dbl&gt;\n1 1666427"
  },
  {
    "objectID": "2024/Day_1.html#challenge-part-1",
    "href": "2024/Day_1.html#challenge-part-1",
    "title": "Day 1 - Historian Hysteria",
    "section": "",
    "text": "The Chief Historian is always present for the big Christmas sleigh launch, but nobody has seen him in months! Last anyone heard, he was visiting locations that are historically significant to the North Pole; a group of Senior Historians has asked you to accompany them as they check the places they think he was most likely to visit.\nAs each location is checked, they will mark it on their list with a star. They figure the Chief Historian must be in one of the first fifty places they’ll look, so in order to save Christmas, you need to help them get fifty stars on their list before Santa takes off on December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou haven’t even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently empty. Eventually, someone decides that the best place to check first would be the Chief Historian’s office.\nUpon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?\nThroughout the Chief’s office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don’t miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.\nThere’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?\nFor example:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nMaybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nWithin each pair, figure out how far apart the two numbers are; you’ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.\nIn the example list above, the pairs and distances would be as follows:\n\nThe smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.\nThe second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.\nThe third-smallest number in both lists is 3, so the distance between them is 0.\nThe next numbers to pair up are 3 and 4, a distance of 1.\nThe fifth-smallest numbers in each list are 3 and 5, a distance of 2.\nFinally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.\n\nTo find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\n\n\n\nread_delim(\"input1.txt\", show_col_types = FALSE,\n         col_names = c(\"col1\",\"col3\", \"col4\", \"col2\")) |&gt;\n  select(col1, col2) -&gt; input\ninput\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 38450 56790\n 2 94765 36795\n 3 89694 26251\n 4 96083 99006\n 5 57068 30577\n 6 32031 60133\n 7 97652 26657\n 8 85752 40654\n 9 66117 44144\n10 29274 30512\n# ℹ 990 more rows\n\n\n\n\n\n\ninput |&gt;\n  arrange(col1) |&gt;\n  select(col1) -&gt; input1\ninput1\n\n# A tibble: 1,000 × 1\n    col1\n   &lt;dbl&gt;\n 1 10003\n 2 10072\n 3 10266\n 4 10383\n 5 10483\n 6 10498\n 7 10548\n 8 10589\n 9 10605\n10 10610\n# ℹ 990 more rows\n\n\n\ninput |&gt;\n  arrange(col2) |&gt;\n  select(col2) -&gt; input2\ninput2\n\n# A tibble: 1,000 × 1\n    col2\n   &lt;dbl&gt;\n 1 10051\n 2 10589\n 3 10589\n 4 10638\n 5 10699\n 6 10996\n 7 11025\n 8 11243\n 9 11820\n10 11918\n# ℹ 990 more rows\n\n\n\ninput1 |&gt;\n  mutate(input2, col2) -&gt; input3\ninput3\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051\n 2 10072 10589\n 3 10266 10589\n 4 10383 10638\n 5 10483 10699\n 6 10498 10996\n 7 10548 11025\n 8 10589 11243\n 9 10605 11820\n10 10610 11918\n# ℹ 990 more rows\n\n\n\ninput3 |&gt;\n  mutate(dif = abs(col1 - col2)) -&gt; input4\ninput4\n\n# A tibble: 1,000 × 3\n    col1  col2   dif\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051    48\n 2 10072 10589   517\n 3 10266 10589   323\n 4 10383 10638   255\n 5 10483 10699   216\n 6 10498 10996   498\n 7 10548 11025   477\n 8 10589 11243   654\n 9 10605 11820  1215\n10 10610 11918  1308\n# ℹ 990 more rows\n\n\n\ninput4 |&gt;\n  summarise(total = sum(dif))\n\n# A tibble: 1 × 1\n    total\n    &lt;dbl&gt;\n1 1666427"
  },
  {
    "objectID": "2024/Day_1.html#challenge-part-2",
    "href": "2024/Day_1.html#challenge-part-2",
    "title": "Day 1 - Historian Hysteria",
    "section": "Challenge Part 2",
    "text": "Challenge Part 2\nYour analysis only confirmed what everyone feared: the two lists of location IDs are indeed very different.\nOr are they?\nThe Historians can’t agree on which group made the mistakes or how to read most of the Chief’s handwriting, but in the commotion you notice an interesting detail: a lot of location IDs appear in both lists! Maybe the other numbers aren’t location IDs at all but rather misinterpreted handwriting.\nThis time, you’ll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.\nHere are the same example lists again:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nFor these example lists, here is the process of finding the similarity score:\n\nThe first number in the left list is 3. It appears in the right list three times, so the similarity score increases by 3 * 3 = 9.\nThe second number in the left list is 4. It appears in the right list once, so the similarity score increases by 4 * 1 = 4.\nThe third number in the left list is 2. It does not appear in the right list, so the similarity score does not increase (2 * 0 = 0).\nThe fourth number, 1, also does not appear in the right list.\nThe fifth number, 3, appears in the right list three times; the similarity score increases by 9.\nThe last number, 3, appears in the right list three times; the similarity score again increases by 9.\n\nSo, for these example lists, the similarity score at the end of this process is 31 (9 + 4 + 0 + 0 + 9 + 9).\nOnce again consider your left and right lists. What is their similarity score?\n\nRunning code\n\ninput3\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051\n 2 10072 10589\n 3 10266 10589\n 4 10383 10638\n 5 10483 10699\n 6 10498 10996\n 7 10548 11025\n 8 10589 11243\n 9 10605 11820\n10 10610 11918\n# ℹ 990 more rows\n\n\n\ninput |&gt; \n  mutate(occurences = map_int(col1, function(x) sum(x == input$col2))) -&gt; input5\ninput5\n\n# A tibble: 1,000 × 3\n    col1  col2 occurences\n   &lt;dbl&gt; &lt;dbl&gt;      &lt;int&gt;\n 1 38450 56790          0\n 2 94765 36795          0\n 3 89694 26251          0\n 4 96083 99006          0\n 5 57068 30577          6\n 6 32031 60133          0\n 7 97652 26657          0\n 8 85752 40654          0\n 9 66117 44144          0\n10 29274 30512          0\n# ℹ 990 more rows\n\n\n\ninput5 |&gt;\n  mutate(score = col1*occurences)\n\n# A tibble: 1,000 × 4\n    col1  col2 occurences  score\n   &lt;dbl&gt; &lt;dbl&gt;      &lt;int&gt;  &lt;dbl&gt;\n 1 38450 56790          0      0\n 2 94765 36795          0      0\n 3 89694 26251          0      0\n 4 96083 99006          0      0\n 5 57068 30577          6 342408\n 6 32031 60133          0      0\n 7 97652 26657          0      0\n 8 85752 40654          0      0\n 9 66117 44144          0      0\n10 29274 30512          0      0\n# ℹ 990 more rows\n\n\n\ninput5 |&gt;\n  mutate(score = col1*occurences) |&gt;\n  summarise(total = sum(score))\n\n# A tibble: 1 × 1\n     total\n     &lt;dbl&gt;\n1 24316233"
  },
  {
    "objectID": "2024.html",
    "href": "2024.html",
    "title": "2024",
    "section": "",
    "text": "Day 1 - Historian Hysteria\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 2 - Red-Nosed Reports\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 3 - Mull It Over\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello, bom dia, I am Mariana and I enjoy solving puzzles"
  },
  {
    "objectID": "2023.html",
    "href": "2023.html",
    "title": "2023",
    "section": "",
    "text": "Jour 1 - Trebuchet?!\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2024/Day_3.html",
    "href": "2024/Day_3.html",
    "title": "Day 3 - Mull It Over",
    "section": "",
    "text": "“Our computers are having issues, so I have no idea if we have any Chief Historians in stock! You’re welcome to check the warehouse, though,” says the mildly flustered shopkeeper at the North Pole Toboggan Rental Shop. The Historians head out to take a look.\nThe shopkeeper turns to you. “Any chance you can see why our computers are having issues again?”\nThe computer appears to be trying to run a program, but its memory (your puzzle input) is corrupted. All of the instructions have been jumbled up!\nIt seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y), where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, mul(123,4) would multiply 123 by 4.\nHowever, because the program’s memory has been corrupted, there are also many invalid characters that should be ignored, even if they look like part of a mul instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing.\nFor example, consider the following section of corrupted memory:\nxmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))\nOnly the four highlighted sections are real mul instructions. Adding up the result of each instruction produces 161 (2*4 + 5*5 + 11*8 + 8*5).\nScan the corrupted memory for uncorrupted mul instructions. What do you get if you add up all of the results of the multiplications?\n\n\n\nsuppressWarnings(read_lines(\"input3.txt\")) -&gt; texte\nhead(texte,1)\n\n[1] \"~-mul(858,892)?@#mul(380,985)what()[^what()%mul(340,11)~*}don't())/~-mul(849,387)%-why()when():how()&gt;-,what()mul(605,504)what()~:]what();how()who()];mul(771,783)?^ who()}~?&gt;mul(111,830))@ ~mul(329,797)%'why()why()mul(125,409)-*/where()()@&amp;!why()mul(390,37)when(974,538)#/when()){/don't()/mul(20,990)}?%{(who()mul(627,567)(how()'&lt;(#%how()mul(387,315){;%who()%#from()mul(868,680)}^$mul(862,19)mul(847,689)&gt;((#@when()}mul(339,156)+/{}@{^%[why(231,704)mul(236,754)]'^where(978,690)mul(460,872)#'*mul(518,944)&gt;mul(301,886))mul(477,933)^mul(685,909)who())]what(288,791)mul(170,434){ &amp;where()~(@where()mul(191,104)mul(637,600)&amp;select()why())~select()mul(534,617)?mul(763,508){from()when(22,266)+who() when()mul(204,352)when()mul(426,122)-&lt;*where()'$ why()mul(192,980)[(#[!$-}mul(798,208)''[!where()what()select()mul(295,727))#)}($&lt;?&lt;mul(452,502)(don't()mul(737,492)&gt;,$%where(539,126)what()when()select()'@mul(311,541),?don't()#select()!}!(}&amp;?mul(100,142)),-}%mul(222,856)~$;&gt;!from()where()mul(758,901)mul(757,796)mul(976,686);@'~+-{#who()mul(26,971);mul(404,362)^~who(417,106)what()#mul(186,691)from() %#+{/mul(67,433)-who()!-+!mul(184,469)*when()[&amp;when(458,221)&lt;$mul(163,556)^)]?,'}&amp;+who()mul(514,239)~)(mul(143,441)'how(741,776)~who(766,575)when();&gt;*^mul(281,143)+!&gt;;+:mul(767,44)#&lt;mul(490,849)&gt; when()why()don't()how()from()[from()from(){mul(436,519)what() *who();@{,&gt;do()%'mul(19,540)when()mul(643,539)~when(812,543)mul(527,639)-!mul(409,379)where()/(mul(168,491)#$&gt;]mul(432,333)@%&lt;when();{?what()^mul(819,413)'where(65,845)}-' ^@don't()?how()when()&gt;&gt;&lt;mul(591,832)where(600,755)]who()}do()!^-$what()from()select()'#mul(572,956)@#:what()from(),]mul(303,346) when()$$how()@%/#$mul(857,344)/what()where()mul(969,234)$!#when()&gt;&gt;&amp;who()(mul(113,494)%where()why()when()mul(659,592)&lt;why()!&lt;}mul(429,162)[who()*&gt;#(/'mul(72,670)when()^^mul(369,596)mul(631,168)-why()()[*}mul(330,968) $why()where()mul(230,139)don't()@)@&lt;mul(849,413)-when(){*?]mul(821,9)mul(753,277)]{&amp;when()%:mul(262,360)what()mul(65,276)don't()])who();where()$!,(-mul(952,221)+:/{where()where()mul(608,843)'&gt;where())%}where()&amp;,}mul(875,661)~don't()':why(){mul(793*:mul(399,702)!://select()@when()why()do()@mul(488,581{?{&amp;&lt;who(617,140)@how()mul(156,982)why()'&amp;&lt;where()*:{mul(452{-+$$*/mul(202,724)]#:#why()+??(#mul(607,2)@^mul(20,845)#{+#[/#~/mul(111,872)how()select()]&lt;how())'how()mul(921,254)$:;/where() ~why()}?mul(558,122)@how()&lt;&lt;who()mul(992,319)what(734,450)[^mul(498,490)/mul(632,639)when()]from(){why()]$[who(664,268)mul(401,695]!&gt;how()&amp;select()!&lt;'mul(912,311)why()! })@+}mul(128*mul(626,752)%mul(49,60)[,who()what()select()&lt;what()mul(24,8)&gt;)@@]*]why(937,788)from():mul(945,658)&lt;]don't()where()how(515,644)@+'select()how()mul(369,665)/],&lt;when(){( $how()mul(361,594)$select()&amp;:{:$when()mul(52,806) #from()@when()where():&gt;mul(263,185)where()^why()why()@what()mul(82,407)mul(464,537)[mul(871,333)^mul(560,227)-why()mul(966,203)$what()+where()#mul(101,21)}%how(),)^who()&gt;,select()mul(667,565)('what(),%select()(@mul(500,204:''&lt;~'why(477,559)&lt;do()&gt;)[where()mul(698,648);how(){&amp;?what()^@[%mul(280,395)&gt;~, mul-#/%:where()&gt;where():mul(170,746)don't()}($:@mul(998,876)*~&lt;[mul(121,366)-?#;how()&gt;from() ::mul(804,883)^-[  (:mul(100,354who(544,766)+,]&gt;!['/;mul(949,115)\"\n\n\n\n\n\n\nmul &lt;- str_extract_all(texte, \"mul\\\\(\\\\d+,\\\\d+\\\\)\") |&gt; \n  unlist() |&gt; \n   str_replace(\"mul\", \"`*`\")\nhead(mul,10)\n\n [1] \"`*`(858,892)\" \"`*`(380,985)\" \"`*`(340,11)\"  \"`*`(849,387)\" \"`*`(605,504)\"\n [6] \"`*`(771,783)\" \"`*`(111,830)\" \"`*`(329,797)\" \"`*`(125,409)\" \"`*`(390,37)\" \n\n\n\nmap_int(mul, function(x) parse(text = x) |&gt; eval()) |&gt; sum()\n\n[1] 173529487"
  },
  {
    "objectID": "2024/Day_3.html#challenge-part-1",
    "href": "2024/Day_3.html#challenge-part-1",
    "title": "Day 3 - Mull It Over",
    "section": "",
    "text": "“Our computers are having issues, so I have no idea if we have any Chief Historians in stock! You’re welcome to check the warehouse, though,” says the mildly flustered shopkeeper at the North Pole Toboggan Rental Shop. The Historians head out to take a look.\nThe shopkeeper turns to you. “Any chance you can see why our computers are having issues again?”\nThe computer appears to be trying to run a program, but its memory (your puzzle input) is corrupted. All of the instructions have been jumbled up!\nIt seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y), where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, mul(123,4) would multiply 123 by 4.\nHowever, because the program’s memory has been corrupted, there are also many invalid characters that should be ignored, even if they look like part of a mul instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing.\nFor example, consider the following section of corrupted memory:\nxmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))\nOnly the four highlighted sections are real mul instructions. Adding up the result of each instruction produces 161 (2*4 + 5*5 + 11*8 + 8*5).\nScan the corrupted memory for uncorrupted mul instructions. What do you get if you add up all of the results of the multiplications?\n\n\n\nsuppressWarnings(read_lines(\"input3.txt\")) -&gt; texte\nhead(texte,1)\n\n[1] \"~-mul(858,892)?@#mul(380,985)what()[^what()%mul(340,11)~*}don't())/~-mul(849,387)%-why()when():how()&gt;-,what()mul(605,504)what()~:]what();how()who()];mul(771,783)?^ who()}~?&gt;mul(111,830))@ ~mul(329,797)%'why()why()mul(125,409)-*/where()()@&amp;!why()mul(390,37)when(974,538)#/when()){/don't()/mul(20,990)}?%{(who()mul(627,567)(how()'&lt;(#%how()mul(387,315){;%who()%#from()mul(868,680)}^$mul(862,19)mul(847,689)&gt;((#@when()}mul(339,156)+/{}@{^%[why(231,704)mul(236,754)]'^where(978,690)mul(460,872)#'*mul(518,944)&gt;mul(301,886))mul(477,933)^mul(685,909)who())]what(288,791)mul(170,434){ &amp;where()~(@where()mul(191,104)mul(637,600)&amp;select()why())~select()mul(534,617)?mul(763,508){from()when(22,266)+who() when()mul(204,352)when()mul(426,122)-&lt;*where()'$ why()mul(192,980)[(#[!$-}mul(798,208)''[!where()what()select()mul(295,727))#)}($&lt;?&lt;mul(452,502)(don't()mul(737,492)&gt;,$%where(539,126)what()when()select()'@mul(311,541),?don't()#select()!}!(}&amp;?mul(100,142)),-}%mul(222,856)~$;&gt;!from()where()mul(758,901)mul(757,796)mul(976,686);@'~+-{#who()mul(26,971);mul(404,362)^~who(417,106)what()#mul(186,691)from() %#+{/mul(67,433)-who()!-+!mul(184,469)*when()[&amp;when(458,221)&lt;$mul(163,556)^)]?,'}&amp;+who()mul(514,239)~)(mul(143,441)'how(741,776)~who(766,575)when();&gt;*^mul(281,143)+!&gt;;+:mul(767,44)#&lt;mul(490,849)&gt; when()why()don't()how()from()[from()from(){mul(436,519)what() *who();@{,&gt;do()%'mul(19,540)when()mul(643,539)~when(812,543)mul(527,639)-!mul(409,379)where()/(mul(168,491)#$&gt;]mul(432,333)@%&lt;when();{?what()^mul(819,413)'where(65,845)}-' ^@don't()?how()when()&gt;&gt;&lt;mul(591,832)where(600,755)]who()}do()!^-$what()from()select()'#mul(572,956)@#:what()from(),]mul(303,346) when()$$how()@%/#$mul(857,344)/what()where()mul(969,234)$!#when()&gt;&gt;&amp;who()(mul(113,494)%where()why()when()mul(659,592)&lt;why()!&lt;}mul(429,162)[who()*&gt;#(/'mul(72,670)when()^^mul(369,596)mul(631,168)-why()()[*}mul(330,968) $why()where()mul(230,139)don't()@)@&lt;mul(849,413)-when(){*?]mul(821,9)mul(753,277)]{&amp;when()%:mul(262,360)what()mul(65,276)don't()])who();where()$!,(-mul(952,221)+:/{where()where()mul(608,843)'&gt;where())%}where()&amp;,}mul(875,661)~don't()':why(){mul(793*:mul(399,702)!://select()@when()why()do()@mul(488,581{?{&amp;&lt;who(617,140)@how()mul(156,982)why()'&amp;&lt;where()*:{mul(452{-+$$*/mul(202,724)]#:#why()+??(#mul(607,2)@^mul(20,845)#{+#[/#~/mul(111,872)how()select()]&lt;how())'how()mul(921,254)$:;/where() ~why()}?mul(558,122)@how()&lt;&lt;who()mul(992,319)what(734,450)[^mul(498,490)/mul(632,639)when()]from(){why()]$[who(664,268)mul(401,695]!&gt;how()&amp;select()!&lt;'mul(912,311)why()! })@+}mul(128*mul(626,752)%mul(49,60)[,who()what()select()&lt;what()mul(24,8)&gt;)@@]*]why(937,788)from():mul(945,658)&lt;]don't()where()how(515,644)@+'select()how()mul(369,665)/],&lt;when(){( $how()mul(361,594)$select()&amp;:{:$when()mul(52,806) #from()@when()where():&gt;mul(263,185)where()^why()why()@what()mul(82,407)mul(464,537)[mul(871,333)^mul(560,227)-why()mul(966,203)$what()+where()#mul(101,21)}%how(),)^who()&gt;,select()mul(667,565)('what(),%select()(@mul(500,204:''&lt;~'why(477,559)&lt;do()&gt;)[where()mul(698,648);how(){&amp;?what()^@[%mul(280,395)&gt;~, mul-#/%:where()&gt;where():mul(170,746)don't()}($:@mul(998,876)*~&lt;[mul(121,366)-?#;how()&gt;from() ::mul(804,883)^-[  (:mul(100,354who(544,766)+,]&gt;!['/;mul(949,115)\"\n\n\n\n\n\n\nmul &lt;- str_extract_all(texte, \"mul\\\\(\\\\d+,\\\\d+\\\\)\") |&gt; \n  unlist() |&gt; \n   str_replace(\"mul\", \"`*`\")\nhead(mul,10)\n\n [1] \"`*`(858,892)\" \"`*`(380,985)\" \"`*`(340,11)\"  \"`*`(849,387)\" \"`*`(605,504)\"\n [6] \"`*`(771,783)\" \"`*`(111,830)\" \"`*`(329,797)\" \"`*`(125,409)\" \"`*`(390,37)\" \n\n\n\nmap_int(mul, function(x) parse(text = x) |&gt; eval()) |&gt; sum()\n\n[1] 173529487"
  },
  {
    "objectID": "2024/Day_3.html#challenge-part-2",
    "href": "2024/Day_3.html#challenge-part-2",
    "title": "Day 3 - Mull It Over",
    "section": "Challenge Part 2",
    "text": "Challenge Part 2\nAs you scan through the corrupted memory, you notice that some of the conditional statements are also still intact. If you handle some of the uncorrupted conditional statements in the program, you might be able to get an even more accurate result.\nThere are two new instructions you’ll need to handle:\n\nThe do() instruction enables future mul instructions.\nThe don't() instruction disables future mul instructions.\n\nOnly the most recent do() or don't() instruction applies. At the beginning of the program, mul instructions are enabled.\nFor example:\nxmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))\nThis corrupted memory is similar to the example from before, but this time the mul(5,5) and mul(11,8) instructions are disabled because there is a don't() instruction before them. The other mul instructions function normally, including the one at the end that gets re-enabled by a do()instruction.\nThis time, the sum of the results is 48 (2*4 + 8*5).\nHandle the new instructions; what do you get if you add up all of the results of just the enabled multiplications?\n\nRunning code\n\npaste(texte, collapse = \"\") |&gt;\n  str_remove_all(\"don't\\\\(\\\\).+?do\\\\(\\\\)\") |&gt; \n  str_extract_all(\"mul\\\\(\\\\d+,\\\\d+\\\\)\") |&gt; \n  unlist() |&gt; \n   str_replace(\"mul\", \"`*`\") |&gt; \n  map_int(function(x) parse(text = x) |&gt; eval()) |&gt; sum()\n\n[1] 99532691"
  },
  {
    "objectID": "2024/Day_2.html",
    "href": "2024/Day_2.html",
    "title": "Day 2 - Red-Nosed Reports",
    "section": "",
    "text": "Fortunately, the first location The Historians want to search isn’t a long walk from the Chief Historian’s office.\nWhile the Red-Nosed Reindeer nuclear fusion/fission plant appears to contain no sign of the Chief Historian, the engineers there run up to you as soon as they see you. Apparently, they still talk about the time Rudolph was saved through molecular synthesis from a single electron.\nThey’re quick to add that - since you’re already here - they’d really appreciate your help analyzing some unusual data from the Red-Nosed reactor. You turn to check if The Historians are waiting for you, but they seem to have already divided into groups that are currently searching every corner of the facility. You offer to help with the unusual data.\nThe unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:\n7 6 4 2 1\n1 2 7 8 9\n9 7 6 2 1\n1 3 2 4 5\n8 6 4 4 1\n1 3 6 7 9\nThis example data contains six reports each containing five levels.\nThe engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:\n\nThe levels are either all increasing or all decreasing.\nAny two adjacent levels differ by at least one and at most three.\n\nIn the example above, the reports can be found safe or unsafe by checking those rules:\n\n7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.\n1 2 7 8 9: Unsafe because 2 7 is an increase of 5.\n9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.\n1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.\n8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.\n1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.\n\nSo, in this example, 2 reports are safe.\nAnalyze the unusual data from the engineers. How many reports are safe?\n\n\n\nsuppressWarnings(read_lines(\"input2.txt\")) -&gt; input \nhead(input, 10)\n\n [1] \"14 15 13 14 17 20 21 26\" \"65 67 70 72 74 73\"      \n [3] \"32 35 37 39 39\"          \"28 31 34 35 38 39 43\"   \n [5] \"51 54 56 58 59 60 63 70\" \"77 78 80 81 80 82\"      \n [7] \"28 31 32 35 32 31\"       \"41 43 42 44 45 45\"      \n [9] \"41 42 39 41 42 44 48\"    \"24 25 27 27 28 29 31 32\"\n\n\n\n\n\n\ntibble(input = input) |&gt; \n  mutate(vec = map(input, function(x) str_split_1(x, \" \") |&gt; as.integer()),\n         diff = map(vec, diff),\n         sign = map(diff, sign),\n         descending = map_int(sign, function(x) sum(x == -1)),\n         ascending = map_int(sign, function(x) sum(x == 1)),\n         lg = map_int(vec, length)) -&gt; table1\ntable1\n\n# A tibble: 1,000 × 7\n   input                   vec       diff      sign   descending ascending    lg\n   &lt;chr&gt;                   &lt;list&gt;    &lt;list&gt;    &lt;list&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 14 15 13 14 17 20 21 26 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           1         6     8\n 2 65 67 70 72 74 73       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         4     6\n 3 32 35 37 39 39          &lt;int [5]&gt; &lt;int [4]&gt; &lt;dbl&gt;           0         3     5\n 4 28 31 34 35 38 39 43    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 5 51 54 56 58 59 60 63 70 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 6 77 78 80 81 80 82       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         4     6\n 7 28 31 32 35 32 31       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           2         3     6\n 8 41 43 42 44 45 45       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         3     6\n 9 41 42 39 41 42 44 48    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           1         5     7\n10 24 25 27 27 28 29 31 32 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         6     8\n# ℹ 990 more rows\n\n\n\ntable1 |&gt;\n  filter(descending == lg - 1 | ascending == lg - 1) -&gt; table2\ntable2\n\n# A tibble: 381 × 7\n   input                   vec       diff      sign   descending ascending    lg\n   &lt;chr&gt;                   &lt;list&gt;    &lt;list&gt;    &lt;list&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 28 31 34 35 38 39 43    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 2 51 54 56 58 59 60 63 70 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 3 40 41 42 43 44 48 51 52 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 4 7 10 14 17 20 24        &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           0         5     6\n 5 26 29 33 34 36 38 41 47 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 6 15 16 23 25 26 28 29    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 7 77 79 86 88 91 92 94 98 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 8 24 26 28 34 36 43       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           0         5     6\n 9 54 58 61 64 66          &lt;int [5]&gt; &lt;int [4]&gt; &lt;dbl&gt;           0         4     5\n10 52 56 58 61 63 64 67 71 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n# ℹ 371 more rows\n\n\n\ntable2 |&gt;\n  mutate(correct_diff = map_lgl(diff, function(x) all(abs(x) &lt;= 3 ))) |&gt; \n  filter(correct_diff) |&gt;\n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   218"
  },
  {
    "objectID": "2024/Day_2.html#challenge-part-1",
    "href": "2024/Day_2.html#challenge-part-1",
    "title": "Day 2 - Red-Nosed Reports",
    "section": "",
    "text": "Fortunately, the first location The Historians want to search isn’t a long walk from the Chief Historian’s office.\nWhile the Red-Nosed Reindeer nuclear fusion/fission plant appears to contain no sign of the Chief Historian, the engineers there run up to you as soon as they see you. Apparently, they still talk about the time Rudolph was saved through molecular synthesis from a single electron.\nThey’re quick to add that - since you’re already here - they’d really appreciate your help analyzing some unusual data from the Red-Nosed reactor. You turn to check if The Historians are waiting for you, but they seem to have already divided into groups that are currently searching every corner of the facility. You offer to help with the unusual data.\nThe unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:\n7 6 4 2 1\n1 2 7 8 9\n9 7 6 2 1\n1 3 2 4 5\n8 6 4 4 1\n1 3 6 7 9\nThis example data contains six reports each containing five levels.\nThe engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:\n\nThe levels are either all increasing or all decreasing.\nAny two adjacent levels differ by at least one and at most three.\n\nIn the example above, the reports can be found safe or unsafe by checking those rules:\n\n7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.\n1 2 7 8 9: Unsafe because 2 7 is an increase of 5.\n9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.\n1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.\n8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.\n1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.\n\nSo, in this example, 2 reports are safe.\nAnalyze the unusual data from the engineers. How many reports are safe?\n\n\n\nsuppressWarnings(read_lines(\"input2.txt\")) -&gt; input \nhead(input, 10)\n\n [1] \"14 15 13 14 17 20 21 26\" \"65 67 70 72 74 73\"      \n [3] \"32 35 37 39 39\"          \"28 31 34 35 38 39 43\"   \n [5] \"51 54 56 58 59 60 63 70\" \"77 78 80 81 80 82\"      \n [7] \"28 31 32 35 32 31\"       \"41 43 42 44 45 45\"      \n [9] \"41 42 39 41 42 44 48\"    \"24 25 27 27 28 29 31 32\"\n\n\n\n\n\n\ntibble(input = input) |&gt; \n  mutate(vec = map(input, function(x) str_split_1(x, \" \") |&gt; as.integer()),\n         diff = map(vec, diff),\n         sign = map(diff, sign),\n         descending = map_int(sign, function(x) sum(x == -1)),\n         ascending = map_int(sign, function(x) sum(x == 1)),\n         lg = map_int(vec, length)) -&gt; table1\ntable1\n\n# A tibble: 1,000 × 7\n   input                   vec       diff      sign   descending ascending    lg\n   &lt;chr&gt;                   &lt;list&gt;    &lt;list&gt;    &lt;list&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 14 15 13 14 17 20 21 26 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           1         6     8\n 2 65 67 70 72 74 73       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         4     6\n 3 32 35 37 39 39          &lt;int [5]&gt; &lt;int [4]&gt; &lt;dbl&gt;           0         3     5\n 4 28 31 34 35 38 39 43    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 5 51 54 56 58 59 60 63 70 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 6 77 78 80 81 80 82       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         4     6\n 7 28 31 32 35 32 31       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           2         3     6\n 8 41 43 42 44 45 45       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         3     6\n 9 41 42 39 41 42 44 48    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           1         5     7\n10 24 25 27 27 28 29 31 32 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         6     8\n# ℹ 990 more rows\n\n\n\ntable1 |&gt;\n  filter(descending == lg - 1 | ascending == lg - 1) -&gt; table2\ntable2\n\n# A tibble: 381 × 7\n   input                   vec       diff      sign   descending ascending    lg\n   &lt;chr&gt;                   &lt;list&gt;    &lt;list&gt;    &lt;list&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 28 31 34 35 38 39 43    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 2 51 54 56 58 59 60 63 70 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 3 40 41 42 43 44 48 51 52 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 4 7 10 14 17 20 24        &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           0         5     6\n 5 26 29 33 34 36 38 41 47 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 6 15 16 23 25 26 28 29    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 7 77 79 86 88 91 92 94 98 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 8 24 26 28 34 36 43       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           0         5     6\n 9 54 58 61 64 66          &lt;int [5]&gt; &lt;int [4]&gt; &lt;dbl&gt;           0         4     5\n10 52 56 58 61 63 64 67 71 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n# ℹ 371 more rows\n\n\n\ntable2 |&gt;\n  mutate(correct_diff = map_lgl(diff, function(x) all(abs(x) &lt;= 3 ))) |&gt; \n  filter(correct_diff) |&gt;\n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   218"
  },
  {
    "objectID": "2024/Day_2.html#challenge-part-2",
    "href": "2024/Day_2.html#challenge-part-2",
    "title": "Day 2 - Red-Nosed Reports",
    "section": "Challenge Part 2",
    "text": "Challenge Part 2\nThe engineers are surprised by the low number of safe reports until they realize they forgot to tell you about the Problem Dampener.\nThe Problem Dampener is a reactor-mounted module that lets the reactor safety systems tolerate a single bad level in what would otherwise be a safe report. It’s like the bad level never happened!\nNow, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.\nMore of the above example’s reports are now safe:\n\n7 6 4 2 1: Safe without removing any level.\n1 2 7 8 9: Unsafe regardless of which level is removed.\n9 7 6 2 1: Unsafe regardless of which level is removed.\n1 3 2 4 5: Safe by removing the second level, 3.\n8 6 4 4 1: Safe by removing the third level, 4.\n1 3 6 7 9: Safe without removing any level.\n\nThanks to the Problem Dampener, 4 reports are actually safe!\nUpdate your analysis by handling situations where the Problem Dampener can remove a single level from unsafe reports. How many reports are now safe?\n\nRunning code\n\nbadlevel &lt;- function(v) {\n  map(seq_along(v), function(x) v[-x])\n}\n\n\ntibble(input = input) |&gt; \n  mutate(vec = map(input, function(x) str_split_1(x, \" \") |&gt; as.integer()),\n         id = seq_along(input),\n         out = map(vec, badlevel)) |&gt; \n  unnest(out) -&gt; table3\ntable3\n\n# A tibble: 6,482 × 4\n   input                   vec          id out      \n   &lt;chr&gt;                   &lt;list&gt;    &lt;int&gt; &lt;list&gt;   \n 1 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 2 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 3 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 4 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 5 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 6 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 7 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 8 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 9 65 67 70 72 74 73       &lt;int [6]&gt;     2 &lt;int [5]&gt;\n10 65 67 70 72 74 73       &lt;int [6]&gt;     2 &lt;int [5]&gt;\n# ℹ 6,472 more rows\n\n\n\ntable3 |&gt; \n  mutate(diff = map(out, diff),\n         sign = map(diff, sign),\n         descending = map_int(sign, function(x) sum(x == -1)),\n         ascending = map_int(sign, function(x) sum(x == 1)),\n         lg = map_int(out, length)) -&gt; table4\ntable4\n\n# A tibble: 6,482 × 9\n   input                vec      id out   diff  sign  descending ascending    lg\n   &lt;chr&gt;                &lt;lis&gt; &lt;int&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 2 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 3 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 4 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 5 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 6 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 7 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 8 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 9 65 67 70 72 74 73    &lt;int&gt;     2 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         3     5\n10 65 67 70 72 74 73    &lt;int&gt;     2 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         3     5\n# ℹ 6,472 more rows\n\n\n\ntable4 |&gt;\n  filter(descending == lg - 1 | ascending == lg - 1) -&gt; table5\ntable5\n\n# A tibble: 3,076 × 9\n   input                vec      id out   diff  sign  descending ascending    lg\n   &lt;chr&gt;                &lt;lis&gt; &lt;int&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 65 67 70 72 74 73    &lt;int&gt;     2 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         4     5\n 2 65 67 70 72 74 73    &lt;int&gt;     2 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         4     5\n 3 32 35 37 39 39       &lt;int&gt;     3 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         3     4\n 4 32 35 37 39 39       &lt;int&gt;     3 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         3     4\n 5 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n 6 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n 7 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n 8 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n 9 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n10 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n# ℹ 3,066 more rows\n\n\n\ntable5 |&gt;\n  mutate(correct_diff = map_lgl(diff, function(x) all(abs(x) &lt;= 3 ))) |&gt; \n  filter(correct_diff) |&gt;\n  count(id) |&gt;\n  nrow()\n\n[1] 290"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "index",
    "section": "",
    "text": "Advent of Code are little puzzles."
  },
  {
    "objectID": "index.html#advent-of-code",
    "href": "index.html#advent-of-code",
    "title": "index",
    "section": "",
    "text": "Advent of Code are little puzzles."
  },
  {
    "objectID": "2022/Day 4.html",
    "href": "2022/Day 4.html",
    "title": "Day 4 - Camp Cleanup",
    "section": "",
    "text": "Space needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique ID number, and each Elf is assigned a range of section IDs.\nHowever, as some of the Elves compare their section assignments with each other, they’ve noticed that many of the assignments overlap. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a big list of the section assignments for each pair (your puzzle input).\nFor example, consider the following list of section assignment pairs:\n2-4,6-8\n2-3,4-5\n5-7,7-9\n2-8,3-7\n6-6,4-6\n2-6,4-8\nFor the first few pairs, this list means:\n\nWithin the first pair of Elves, the first Elf was assigned sections 2-4 (sections 2, 3, and 4), while the second Elf was assigned sections 6-8 (sections 6, 7, 8).\nThe Elves in the second pair were each assigned two sections.\nThe Elves in the third pair were each assigned three sections: one got sections 5, 6, and 7, while the other also got 7, plus 8 and 9.\n\nThis example list uses single-digit section IDs to make it easier to draw; your actual list might contain larger numbers. Visually, these pairs of section assignments look like this:\n.234.....  2-4\n.....678.  6-8\n\n.23......  2-3\n...45....  4-5\n\n....567..  5-7\n......789  7-9\n\n.2345678.  2-8\n..34567..  3-7\n\n.....6...  6-6\n...456...  4-6\n\n.23456...  2-6\n...45678.  4-8\nSome of the pairs have noticed that one of their assignments fully containsthe other. For example, 2-8 fully contains 3-7, and 6-6 is fully contained by 4-6. In pairs where one assignment fully contains the other, one Elf in the pair would be exclusively cleaning sections their partner will already be cleaning, so these seem like the most in need of reconsideration. In this example, there are 2 such pairs.\n\n\n\nread_lines(\"input42022.txt\") |&gt;\n  as_tibble() -&gt; pairs\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\npairs\n\n# A tibble: 1,000 × 1\n   value      \n   &lt;chr&gt;      \n 1 1-93,2-11  \n 2 26-94,26-94\n 3 72-92,48-88\n 4 36-37,37-52\n 5 2-98,1-98  \n 6 1-83,1-84  \n 7 74-79,76-76\n 8 66-85,66-86\n 9 6-73,6-73  \n10 31-57,30-58\n# ℹ 990 more rows\n\n\n\n\n\n\npairs |&gt;\n  rowwise() |&gt;\n   mutate(\n    col1 = str_split_1(value, \",\")[1],\n    col2 = str_split_1(value, \",\")[2]) -&gt; cols\ncols\n\n# A tibble: 1,000 × 3\n# Rowwise: \n   value       col1  col2 \n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;\n 1 1-93,2-11   1-93  2-11 \n 2 26-94,26-94 26-94 26-94\n 3 72-92,48-88 72-92 48-88\n 4 36-37,37-52 36-37 37-52\n 5 2-98,1-98   2-98  1-98 \n 6 1-83,1-84   1-83  1-84 \n 7 74-79,76-76 74-79 76-76\n 8 66-85,66-86 66-85 66-86\n 9 6-73,6-73   6-73  6-73 \n10 31-57,30-58 31-57 30-58\n# ℹ 990 more rows\n\n\n\ncols |&gt;\n  mutate(\n    col1 = str_replace_all(col1, \"-\", \":\"),\n    col2 = str_replace_all(col2, \"-\", \":\")) -&gt; cols1\ncols1\n\n# A tibble: 1,000 × 3\n# Rowwise: \n   value       col1  col2 \n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;\n 1 1-93,2-11   1:93  2:11 \n 2 26-94,26-94 26:94 26:94\n 3 72-92,48-88 72:92 48:88\n 4 36-37,37-52 36:37 37:52\n 5 2-98,1-98   2:98  1:98 \n 6 1-83,1-84   1:83  1:84 \n 7 74-79,76-76 74:79 76:76\n 8 66-85,66-86 66:85 66:86\n 9 6-73,6-73   6:73  6:73 \n10 31-57,30-58 31:57 30:58\n# ℹ 990 more rows\n\n\n\ncols1 |&gt;\n  mutate(col1_range = map(col1, ~ eval(parse(text = .x)))) |&gt;\n  mutate(col2_range = map(col2, ~ eval(parse(text = .x)))) -&gt; cols2\ncols2\n\n# A tibble: 1,000 × 5\n# Rowwise: \n   value       col1  col2  col1_range col2_range\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;list&gt;     &lt;list&gt;    \n 1 1-93,2-11   1:93  2:11  &lt;int [93]&gt; &lt;int [10]&gt;\n 2 26-94,26-94 26:94 26:94 &lt;int [69]&gt; &lt;int [69]&gt;\n 3 72-92,48-88 72:92 48:88 &lt;int [21]&gt; &lt;int [41]&gt;\n 4 36-37,37-52 36:37 37:52 &lt;int [2]&gt;  &lt;int [16]&gt;\n 5 2-98,1-98   2:98  1:98  &lt;int [97]&gt; &lt;int [98]&gt;\n 6 1-83,1-84   1:83  1:84  &lt;int [83]&gt; &lt;int [84]&gt;\n 7 74-79,76-76 74:79 76:76 &lt;int [6]&gt;  &lt;int [1]&gt; \n 8 66-85,66-86 66:85 66:86 &lt;int [20]&gt; &lt;int [21]&gt;\n 9 6-73,6-73   6:73  6:73  &lt;int [68]&gt; &lt;int [68]&gt;\n10 31-57,30-58 31:57 30:58 &lt;int [27]&gt; &lt;int [29]&gt;\n# ℹ 990 more rows\n\n\n\ncols2 |&gt;\n  select(col1_range, col2_range) |&gt; \n  rowwise() |&gt;\n  mutate(is_subset = all(col1_range %in% col2_range) | all(col2_range %in% col1_range)) |&gt;\n  filter(is_subset) |&gt;\n  nrow()\n\n[1] 503"
  },
  {
    "objectID": "2022/Day 4.html#challenge-part-1",
    "href": "2022/Day 4.html#challenge-part-1",
    "title": "Day 4 - Camp Cleanup",
    "section": "",
    "text": "Space needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique ID number, and each Elf is assigned a range of section IDs.\nHowever, as some of the Elves compare their section assignments with each other, they’ve noticed that many of the assignments overlap. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a big list of the section assignments for each pair (your puzzle input).\nFor example, consider the following list of section assignment pairs:\n2-4,6-8\n2-3,4-5\n5-7,7-9\n2-8,3-7\n6-6,4-6\n2-6,4-8\nFor the first few pairs, this list means:\n\nWithin the first pair of Elves, the first Elf was assigned sections 2-4 (sections 2, 3, and 4), while the second Elf was assigned sections 6-8 (sections 6, 7, 8).\nThe Elves in the second pair were each assigned two sections.\nThe Elves in the third pair were each assigned three sections: one got sections 5, 6, and 7, while the other also got 7, plus 8 and 9.\n\nThis example list uses single-digit section IDs to make it easier to draw; your actual list might contain larger numbers. Visually, these pairs of section assignments look like this:\n.234.....  2-4\n.....678.  6-8\n\n.23......  2-3\n...45....  4-5\n\n....567..  5-7\n......789  7-9\n\n.2345678.  2-8\n..34567..  3-7\n\n.....6...  6-6\n...456...  4-6\n\n.23456...  2-6\n...45678.  4-8\nSome of the pairs have noticed that one of their assignments fully containsthe other. For example, 2-8 fully contains 3-7, and 6-6 is fully contained by 4-6. In pairs where one assignment fully contains the other, one Elf in the pair would be exclusively cleaning sections their partner will already be cleaning, so these seem like the most in need of reconsideration. In this example, there are 2 such pairs.\n\n\n\nread_lines(\"input42022.txt\") |&gt;\n  as_tibble() -&gt; pairs\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\npairs\n\n# A tibble: 1,000 × 1\n   value      \n   &lt;chr&gt;      \n 1 1-93,2-11  \n 2 26-94,26-94\n 3 72-92,48-88\n 4 36-37,37-52\n 5 2-98,1-98  \n 6 1-83,1-84  \n 7 74-79,76-76\n 8 66-85,66-86\n 9 6-73,6-73  \n10 31-57,30-58\n# ℹ 990 more rows\n\n\n\n\n\n\npairs |&gt;\n  rowwise() |&gt;\n   mutate(\n    col1 = str_split_1(value, \",\")[1],\n    col2 = str_split_1(value, \",\")[2]) -&gt; cols\ncols\n\n# A tibble: 1,000 × 3\n# Rowwise: \n   value       col1  col2 \n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;\n 1 1-93,2-11   1-93  2-11 \n 2 26-94,26-94 26-94 26-94\n 3 72-92,48-88 72-92 48-88\n 4 36-37,37-52 36-37 37-52\n 5 2-98,1-98   2-98  1-98 \n 6 1-83,1-84   1-83  1-84 \n 7 74-79,76-76 74-79 76-76\n 8 66-85,66-86 66-85 66-86\n 9 6-73,6-73   6-73  6-73 \n10 31-57,30-58 31-57 30-58\n# ℹ 990 more rows\n\n\n\ncols |&gt;\n  mutate(\n    col1 = str_replace_all(col1, \"-\", \":\"),\n    col2 = str_replace_all(col2, \"-\", \":\")) -&gt; cols1\ncols1\n\n# A tibble: 1,000 × 3\n# Rowwise: \n   value       col1  col2 \n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;\n 1 1-93,2-11   1:93  2:11 \n 2 26-94,26-94 26:94 26:94\n 3 72-92,48-88 72:92 48:88\n 4 36-37,37-52 36:37 37:52\n 5 2-98,1-98   2:98  1:98 \n 6 1-83,1-84   1:83  1:84 \n 7 74-79,76-76 74:79 76:76\n 8 66-85,66-86 66:85 66:86\n 9 6-73,6-73   6:73  6:73 \n10 31-57,30-58 31:57 30:58\n# ℹ 990 more rows\n\n\n\ncols1 |&gt;\n  mutate(col1_range = map(col1, ~ eval(parse(text = .x)))) |&gt;\n  mutate(col2_range = map(col2, ~ eval(parse(text = .x)))) -&gt; cols2\ncols2\n\n# A tibble: 1,000 × 5\n# Rowwise: \n   value       col1  col2  col1_range col2_range\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;list&gt;     &lt;list&gt;    \n 1 1-93,2-11   1:93  2:11  &lt;int [93]&gt; &lt;int [10]&gt;\n 2 26-94,26-94 26:94 26:94 &lt;int [69]&gt; &lt;int [69]&gt;\n 3 72-92,48-88 72:92 48:88 &lt;int [21]&gt; &lt;int [41]&gt;\n 4 36-37,37-52 36:37 37:52 &lt;int [2]&gt;  &lt;int [16]&gt;\n 5 2-98,1-98   2:98  1:98  &lt;int [97]&gt; &lt;int [98]&gt;\n 6 1-83,1-84   1:83  1:84  &lt;int [83]&gt; &lt;int [84]&gt;\n 7 74-79,76-76 74:79 76:76 &lt;int [6]&gt;  &lt;int [1]&gt; \n 8 66-85,66-86 66:85 66:86 &lt;int [20]&gt; &lt;int [21]&gt;\n 9 6-73,6-73   6:73  6:73  &lt;int [68]&gt; &lt;int [68]&gt;\n10 31-57,30-58 31:57 30:58 &lt;int [27]&gt; &lt;int [29]&gt;\n# ℹ 990 more rows\n\n\n\ncols2 |&gt;\n  select(col1_range, col2_range) |&gt; \n  rowwise() |&gt;\n  mutate(is_subset = all(col1_range %in% col2_range) | all(col2_range %in% col1_range)) |&gt;\n  filter(is_subset) |&gt;\n  nrow()\n\n[1] 503"
  },
  {
    "objectID": "2022/Day 4.html#challenge-part-2",
    "href": "2022/Day 4.html#challenge-part-2",
    "title": "Day 4 - Camp Cleanup",
    "section": "Challenge Part 2",
    "text": "Challenge Part 2\n\ncols2 |&gt;\n  select(col1_range, col2_range) |&gt; \n  rowwise() |&gt;\n  mutate(is_subset = any(col1_range %in% col2_range))|&gt;\n  filter(is_subset) |&gt;\n  nrow()\n\n[1] 827"
  },
  {
    "objectID": "2022/Day 1.html",
    "href": "2022/Day 1.html",
    "title": "Day 1 - Calorie Counting",
    "section": "",
    "text": "Santa’s reindeer typically eat regular reindeer food, but they need a lot of magical energy to deliver presents on Christmas. For that, their favorite snack is a special type of star fruit that only grows deep in the jungle. The Elves have brought you on their annual expedition to the grove where the fruit grows.\nTo supply enough magical energy, the expedition needs to retrieve a minimum of fifty stars by December 25th. Although the Elves assure you that the grove has plenty of fruit, you decide to grab any fruit you see along the way, just in case.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves’ expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they’ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf’s inventory (if any) by a blank line.\nFor example, suppose the Elves finish writing their items’ Calories and end up with the following list:\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\nThis list represents the Calories of the food carried by five Elves:\n\nThe first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories.\nThe second Elf is carrying one food item with 4000 Calories.\nThe third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories.\nThe fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories.\nThe fifth Elf is carrying one food item with 10000 Calories.\n\nIn case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they’d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000(carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\n\n\nsuppressWarnings(read_lines(\"input12022.txt\")) -&gt; calories\nhead(calories,20)\n\n [1] \"7844\"  \"1892\"  \"10928\" \"4800\"  \"9730\"  \"3485\"  \"7293\"  \"\"      \"11956\"\n[10] \"2767\"  \"12893\" \"2757\"  \"3026\"  \"9979\"  \"\"      \"4507\"  \"4199\"  \"2855\" \n[19] \"1792\"  \"2041\" \n\n\n\n\n\n\ncalories |&gt;\n  as_tibble() |&gt;\n  mutate(group = cumsum(value == \"\")) |&gt;\n  mutate(value = as.numeric(value)) |&gt;    \n  group_by(group) |&gt;                      \n  summarise(total = sum(value, na.rm = TRUE))\n\n# A tibble: 247 × 2\n   group total\n   &lt;int&gt; &lt;dbl&gt;\n 1     0 45972\n 2     1 43378\n 3     2 51973\n 4     3 47725\n 5     4 53008\n 6     5 36890\n 7     6 60022\n 8     7 58572\n 9     8 44149\n10     9 45174\n# ℹ 237 more rows\n\n\n\ncalories |&gt;\n  as.tibble() |&gt;\n  mutate(group = cumsum(value == \"\")) |&gt;\n  mutate(value = as.numeric(value)) |&gt;    \n  group_by(group) |&gt;                      \n  summarise(total = sum(value, na.rm = TRUE))|&gt;\n  drop_na() -&gt; caloriess\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\ncaloriess\n\n# A tibble: 247 × 2\n   group total\n   &lt;int&gt; &lt;dbl&gt;\n 1     0 45972\n 2     1 43378\n 3     2 51973\n 4     3 47725\n 5     4 53008\n 6     5 36890\n 7     6 60022\n 8     7 58572\n 9     8 44149\n10     9 45174\n# ℹ 237 more rows\n\n\n\nmax(caloriess)\n\n[1] 67027\n\n\n\n\n\nBy the time you calculate the answer to the Elves’ question, they’ve already realized that the Elf carrying the most Calories of food might eventually run out of snacks.\nTo avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.\nIn the example above, the top three Elves are the fourth Elf (with 24000Calories), then the third Elf (with 11000 Calories), then the fifth Elf (with 10000 Calories). The sum of the Calories carried by these three elves is 45000.\nFind the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?\n\n\n\n\ncalories |&gt;\n  as.tibble() |&gt;\n  mutate(group = cumsum(value == \"\")) |&gt;\n  mutate(value = as.numeric(value)) |&gt;    \n  group_by(group) |&gt;                      \n  summarise(total = sum(value, na.rm = TRUE)) |&gt;\n  arrange(desc(total))\n\n# A tibble: 247 × 2\n   group total\n   &lt;int&gt; &lt;dbl&gt;\n 1    12 67027\n 2    27 65333\n 3   234 64931\n 4   131 64877\n 5    73 64807\n 6   126 64329\n 7   103 63203\n 8   109 62851\n 9    97 62784\n10    67 62606\n# ℹ 237 more rows\n\n\n\n67027+65333+64931\n\n[1] 197291"
  },
  {
    "objectID": "2022/Day 1.html#challenge-part-1",
    "href": "2022/Day 1.html#challenge-part-1",
    "title": "Day 1 - Calorie Counting",
    "section": "",
    "text": "Santa’s reindeer typically eat regular reindeer food, but they need a lot of magical energy to deliver presents on Christmas. For that, their favorite snack is a special type of star fruit that only grows deep in the jungle. The Elves have brought you on their annual expedition to the grove where the fruit grows.\nTo supply enough magical energy, the expedition needs to retrieve a minimum of fifty stars by December 25th. Although the Elves assure you that the grove has plenty of fruit, you decide to grab any fruit you see along the way, just in case.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves’ expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they’ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf’s inventory (if any) by a blank line.\nFor example, suppose the Elves finish writing their items’ Calories and end up with the following list:\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\nThis list represents the Calories of the food carried by five Elves:\n\nThe first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories.\nThe second Elf is carrying one food item with 4000 Calories.\nThe third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories.\nThe fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories.\nThe fifth Elf is carrying one food item with 10000 Calories.\n\nIn case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they’d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000(carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\n\n\nsuppressWarnings(read_lines(\"input12022.txt\")) -&gt; calories\nhead(calories,20)\n\n [1] \"7844\"  \"1892\"  \"10928\" \"4800\"  \"9730\"  \"3485\"  \"7293\"  \"\"      \"11956\"\n[10] \"2767\"  \"12893\" \"2757\"  \"3026\"  \"9979\"  \"\"      \"4507\"  \"4199\"  \"2855\" \n[19] \"1792\"  \"2041\" \n\n\n\n\n\n\ncalories |&gt;\n  as_tibble() |&gt;\n  mutate(group = cumsum(value == \"\")) |&gt;\n  mutate(value = as.numeric(value)) |&gt;    \n  group_by(group) |&gt;                      \n  summarise(total = sum(value, na.rm = TRUE))\n\n# A tibble: 247 × 2\n   group total\n   &lt;int&gt; &lt;dbl&gt;\n 1     0 45972\n 2     1 43378\n 3     2 51973\n 4     3 47725\n 5     4 53008\n 6     5 36890\n 7     6 60022\n 8     7 58572\n 9     8 44149\n10     9 45174\n# ℹ 237 more rows\n\n\n\ncalories |&gt;\n  as.tibble() |&gt;\n  mutate(group = cumsum(value == \"\")) |&gt;\n  mutate(value = as.numeric(value)) |&gt;    \n  group_by(group) |&gt;                      \n  summarise(total = sum(value, na.rm = TRUE))|&gt;\n  drop_na() -&gt; caloriess\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\ncaloriess\n\n# A tibble: 247 × 2\n   group total\n   &lt;int&gt; &lt;dbl&gt;\n 1     0 45972\n 2     1 43378\n 3     2 51973\n 4     3 47725\n 5     4 53008\n 6     5 36890\n 7     6 60022\n 8     7 58572\n 9     8 44149\n10     9 45174\n# ℹ 237 more rows\n\n\n\nmax(caloriess)\n\n[1] 67027\n\n\n\n\n\nBy the time you calculate the answer to the Elves’ question, they’ve already realized that the Elf carrying the most Calories of food might eventually run out of snacks.\nTo avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.\nIn the example above, the top three Elves are the fourth Elf (with 24000Calories), then the third Elf (with 11000 Calories), then the fifth Elf (with 10000 Calories). The sum of the Calories carried by these three elves is 45000.\nFind the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?\n\n\n\n\ncalories |&gt;\n  as.tibble() |&gt;\n  mutate(group = cumsum(value == \"\")) |&gt;\n  mutate(value = as.numeric(value)) |&gt;    \n  group_by(group) |&gt;                      \n  summarise(total = sum(value, na.rm = TRUE)) |&gt;\n  arrange(desc(total))\n\n# A tibble: 247 × 2\n   group total\n   &lt;int&gt; &lt;dbl&gt;\n 1    12 67027\n 2    27 65333\n 3   234 64931\n 4   131 64877\n 5    73 64807\n 6   126 64329\n 7   103 63203\n 8   109 62851\n 9    97 62784\n10    67 62606\n# ℹ 237 more rows\n\n\n\n67027+65333+64931\n\n[1] 197291"
  }
]