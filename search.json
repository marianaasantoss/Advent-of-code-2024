[
  {
    "objectID": "2024.html",
    "href": "2024.html",
    "title": "2024",
    "section": "",
    "text": "Day 1 - Historian Hysteria\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 2 - Red-Nosed Reports\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 3 - Mull It Over\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello, I am Mariana and I enjoy solving puzzles"
  },
  {
    "objectID": "2023/Jour 1.html",
    "href": "2023/Jour 1.html",
    "title": "Jour 1 - Trebuchet?!",
    "section": "",
    "text": "Something is wrong with global snow production, and you’ve been selected to take a look. The Elves have even given you a map; on it, they’ve used stars to mark the top fifty locations that are likely to be having problems.\nYou’ve been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou try to ask why they can’t just use a weather machine (“not powerful enough”) and where they’re even sending you (“the sky”) and why your map looks mostly blank (“you sure ask a lot of questions”) and hang on did you just say the sky (“of course, where do you think snow comes from”) when you realize that the Elves are already loading you into a trebuchet (“please hold still, we need to strap you in”).\nAs they’re making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\n\n\nread_lines(\"input 1.txt\") |&gt;\n  as.tibble() -&gt; all\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\nall\n\n# A tibble: 1,000 × 1\n   value                                     \n   &lt;chr&gt;                                     \n 1 jjfvnnlfivejj1                            \n 2 6fourfour                                 \n 3 ninevbmltwo69                             \n 4 pcg91vqrfpxxzzzoneightzt                  \n 5 jpprthxgjfive3one1qckhrptpqdc             \n 6 mxphxfnffninethreetdj5jgknqfrxmhxfivexcxqv\n 7 three7pktwo4279z                          \n 8 1qcbszfgonedjcqj66929                     \n 9 fivesixthreeptcqjnkzgdfgzspmlvmmhn3       \n10 vm2sixseven                               \n# ℹ 990 more rows\n\n\n\n\n\n\nall |&gt;\n  mutate(digits = str_extract_all(value, \"\\\\d\") |&gt;\n           map_chr(~ paste(.x, collapse = \"\"))) |&gt;\n  mutate(number = as.numeric(digits)) |&gt;\n  mutate(first_digit = str_sub(number, 1, 1),                                      \n    last_digit = str_sub(number, -1, -1)) |&gt;\n  select(first_digit, last_digit) |&gt;\n  unite(\"sum\", first_digit, last_digit, sep = \"\") |&gt;\n  mutate(sum = as.numeric(sum)) |&gt;\n  summarise(sum(sum))\n\n# A tibble: 1 × 1\n  `sum(sum)`\n       &lt;dbl&gt;\n1      56465"
  },
  {
    "objectID": "2023/Jour 1.html#challenge-part-1",
    "href": "2023/Jour 1.html#challenge-part-1",
    "title": "Jour 1 - Trebuchet?!",
    "section": "",
    "text": "Something is wrong with global snow production, and you’ve been selected to take a look. The Elves have even given you a map; on it, they’ve used stars to mark the top fifty locations that are likely to be having problems.\nYou’ve been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou try to ask why they can’t just use a weather machine (“not powerful enough”) and where they’re even sending you (“the sky”) and why your map looks mostly blank (“you sure ask a lot of questions”) and hang on did you just say the sky (“of course, where do you think snow comes from”) when you realize that the Elves are already loading you into a trebuchet (“please hold still, we need to strap you in”).\nAs they’re making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\n\n\nread_lines(\"input 1.txt\") |&gt;\n  as.tibble() -&gt; all\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\nall\n\n# A tibble: 1,000 × 1\n   value                                     \n   &lt;chr&gt;                                     \n 1 jjfvnnlfivejj1                            \n 2 6fourfour                                 \n 3 ninevbmltwo69                             \n 4 pcg91vqrfpxxzzzoneightzt                  \n 5 jpprthxgjfive3one1qckhrptpqdc             \n 6 mxphxfnffninethreetdj5jgknqfrxmhxfivexcxqv\n 7 three7pktwo4279z                          \n 8 1qcbszfgonedjcqj66929                     \n 9 fivesixthreeptcqjnkzgdfgzspmlvmmhn3       \n10 vm2sixseven                               \n# ℹ 990 more rows\n\n\n\n\n\n\nall |&gt;\n  mutate(digits = str_extract_all(value, \"\\\\d\") |&gt;\n           map_chr(~ paste(.x, collapse = \"\"))) |&gt;\n  mutate(number = as.numeric(digits)) |&gt;\n  mutate(first_digit = str_sub(number, 1, 1),                                      \n    last_digit = str_sub(number, -1, -1)) |&gt;\n  select(first_digit, last_digit) |&gt;\n  unite(\"sum\", first_digit, last_digit, sep = \"\") |&gt;\n  mutate(sum = as.numeric(sum)) |&gt;\n  summarise(sum(sum))\n\n# A tibble: 1 × 1\n  `sum(sum)`\n       &lt;dbl&gt;\n1      56465"
  },
  {
    "objectID": "2024/Day_3.html",
    "href": "2024/Day_3.html",
    "title": "Day 3 - Mull It Over",
    "section": "",
    "text": "“Our computers are having issues, so I have no idea if we have any Chief Historians in stock! You’re welcome to check the warehouse, though,” says the mildly flustered shopkeeper at the North Pole Toboggan Rental Shop. The Historians head out to take a look.\nThe shopkeeper turns to you. “Any chance you can see why our computers are having issues again?”\nThe computer appears to be trying to run a program, but its memory (your puzzle input) is corrupted. All of the instructions have been jumbled up!\nIt seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y), where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, mul(123,4) would multiply 123 by 4.\nHowever, because the program’s memory has been corrupted, there are also many invalid characters that should be ignored, even if they look like part of a mul instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing.\nFor example, consider the following section of corrupted memory:\nxmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))\nOnly the four highlighted sections are real mul instructions. Adding up the result of each instruction produces 161 (2*4 + 5*5 + 11*8 + 8*5).\nScan the corrupted memory for uncorrupted mul instructions. What do you get if you add up all of the results of the multiplications?\n\n\n\nsuppressWarnings(read_lines(\"input3.txt\")) -&gt; texte\nhead(texte,1)\n\n[1] \"~-mul(858,892)?@#mul(380,985)what()[^what()%mul(340,11)~*}don't())/~-mul(849,387)%-why()when():how()&gt;-,what()mul(605,504)what()~:]what();how()who()];mul(771,783)?^ who()}~?&gt;mul(111,830))@ ~mul(329,797)%'why()why()mul(125,409)-*/where()()@&amp;!why()mul(390,37)when(974,538)#/when()){/don't()/mul(20,990)}?%{(who()mul(627,567)(how()'&lt;(#%how()mul(387,315){;%who()%#from()mul(868,680)}^$mul(862,19)mul(847,689)&gt;((#@when()}mul(339,156)+/{}@{^%[why(231,704)mul(236,754)]'^where(978,690)mul(460,872)#'*mul(518,944)&gt;mul(301,886))mul(477,933)^mul(685,909)who())]what(288,791)mul(170,434){ &amp;where()~(@where()mul(191,104)mul(637,600)&amp;select()why())~select()mul(534,617)?mul(763,508){from()when(22,266)+who() when()mul(204,352)when()mul(426,122)-&lt;*where()'$ why()mul(192,980)[(#[!$-}mul(798,208)''[!where()what()select()mul(295,727))#)}($&lt;?&lt;mul(452,502)(don't()mul(737,492)&gt;,$%where(539,126)what()when()select()'@mul(311,541),?don't()#select()!}!(}&amp;?mul(100,142)),-}%mul(222,856)~$;&gt;!from()where()mul(758,901)mul(757,796)mul(976,686);@'~+-{#who()mul(26,971);mul(404,362)^~who(417,106)what()#mul(186,691)from() %#+{/mul(67,433)-who()!-+!mul(184,469)*when()[&amp;when(458,221)&lt;$mul(163,556)^)]?,'}&amp;+who()mul(514,239)~)(mul(143,441)'how(741,776)~who(766,575)when();&gt;*^mul(281,143)+!&gt;;+:mul(767,44)#&lt;mul(490,849)&gt; when()why()don't()how()from()[from()from(){mul(436,519)what() *who();@{,&gt;do()%'mul(19,540)when()mul(643,539)~when(812,543)mul(527,639)-!mul(409,379)where()/(mul(168,491)#$&gt;]mul(432,333)@%&lt;when();{?what()^mul(819,413)'where(65,845)}-' ^@don't()?how()when()&gt;&gt;&lt;mul(591,832)where(600,755)]who()}do()!^-$what()from()select()'#mul(572,956)@#:what()from(),]mul(303,346) when()$$how()@%/#$mul(857,344)/what()where()mul(969,234)$!#when()&gt;&gt;&amp;who()(mul(113,494)%where()why()when()mul(659,592)&lt;why()!&lt;}mul(429,162)[who()*&gt;#(/'mul(72,670)when()^^mul(369,596)mul(631,168)-why()()[*}mul(330,968) $why()where()mul(230,139)don't()@)@&lt;mul(849,413)-when(){*?]mul(821,9)mul(753,277)]{&amp;when()%:mul(262,360)what()mul(65,276)don't()])who();where()$!,(-mul(952,221)+:/{where()where()mul(608,843)'&gt;where())%}where()&amp;,}mul(875,661)~don't()':why(){mul(793*:mul(399,702)!://select()@when()why()do()@mul(488,581{?{&amp;&lt;who(617,140)@how()mul(156,982)why()'&amp;&lt;where()*:{mul(452{-+$$*/mul(202,724)]#:#why()+??(#mul(607,2)@^mul(20,845)#{+#[/#~/mul(111,872)how()select()]&lt;how())'how()mul(921,254)$:;/where() ~why()}?mul(558,122)@how()&lt;&lt;who()mul(992,319)what(734,450)[^mul(498,490)/mul(632,639)when()]from(){why()]$[who(664,268)mul(401,695]!&gt;how()&amp;select()!&lt;'mul(912,311)why()! })@+}mul(128*mul(626,752)%mul(49,60)[,who()what()select()&lt;what()mul(24,8)&gt;)@@]*]why(937,788)from():mul(945,658)&lt;]don't()where()how(515,644)@+'select()how()mul(369,665)/],&lt;when(){( $how()mul(361,594)$select()&amp;:{:$when()mul(52,806) #from()@when()where():&gt;mul(263,185)where()^why()why()@what()mul(82,407)mul(464,537)[mul(871,333)^mul(560,227)-why()mul(966,203)$what()+where()#mul(101,21)}%how(),)^who()&gt;,select()mul(667,565)('what(),%select()(@mul(500,204:''&lt;~'why(477,559)&lt;do()&gt;)[where()mul(698,648);how(){&amp;?what()^@[%mul(280,395)&gt;~, mul-#/%:where()&gt;where():mul(170,746)don't()}($:@mul(998,876)*~&lt;[mul(121,366)-?#;how()&gt;from() ::mul(804,883)^-[  (:mul(100,354who(544,766)+,]&gt;!['/;mul(949,115)\"\n\n\n\n\n\n\nmul &lt;- str_extract_all(texte, \"mul\\\\(\\\\d+,\\\\d+\\\\)\") |&gt; \n  unlist() |&gt; \n   str_replace(\"mul\", \"`*`\")\nhead(mul,10)\n\n [1] \"`*`(858,892)\" \"`*`(380,985)\" \"`*`(340,11)\"  \"`*`(849,387)\" \"`*`(605,504)\"\n [6] \"`*`(771,783)\" \"`*`(111,830)\" \"`*`(329,797)\" \"`*`(125,409)\" \"`*`(390,37)\" \n\n\n\nmap_int(mul, function(x) parse(text = x) |&gt; eval()) |&gt; sum()\n\n[1] 173529487"
  },
  {
    "objectID": "2024/Day_3.html#challenge-part-1",
    "href": "2024/Day_3.html#challenge-part-1",
    "title": "Day 3 - Mull It Over",
    "section": "",
    "text": "“Our computers are having issues, so I have no idea if we have any Chief Historians in stock! You’re welcome to check the warehouse, though,” says the mildly flustered shopkeeper at the North Pole Toboggan Rental Shop. The Historians head out to take a look.\nThe shopkeeper turns to you. “Any chance you can see why our computers are having issues again?”\nThe computer appears to be trying to run a program, but its memory (your puzzle input) is corrupted. All of the instructions have been jumbled up!\nIt seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y), where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, mul(123,4) would multiply 123 by 4.\nHowever, because the program’s memory has been corrupted, there are also many invalid characters that should be ignored, even if they look like part of a mul instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing.\nFor example, consider the following section of corrupted memory:\nxmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))\nOnly the four highlighted sections are real mul instructions. Adding up the result of each instruction produces 161 (2*4 + 5*5 + 11*8 + 8*5).\nScan the corrupted memory for uncorrupted mul instructions. What do you get if you add up all of the results of the multiplications?\n\n\n\nsuppressWarnings(read_lines(\"input3.txt\")) -&gt; texte\nhead(texte,1)\n\n[1] \"~-mul(858,892)?@#mul(380,985)what()[^what()%mul(340,11)~*}don't())/~-mul(849,387)%-why()when():how()&gt;-,what()mul(605,504)what()~:]what();how()who()];mul(771,783)?^ who()}~?&gt;mul(111,830))@ ~mul(329,797)%'why()why()mul(125,409)-*/where()()@&amp;!why()mul(390,37)when(974,538)#/when()){/don't()/mul(20,990)}?%{(who()mul(627,567)(how()'&lt;(#%how()mul(387,315){;%who()%#from()mul(868,680)}^$mul(862,19)mul(847,689)&gt;((#@when()}mul(339,156)+/{}@{^%[why(231,704)mul(236,754)]'^where(978,690)mul(460,872)#'*mul(518,944)&gt;mul(301,886))mul(477,933)^mul(685,909)who())]what(288,791)mul(170,434){ &amp;where()~(@where()mul(191,104)mul(637,600)&amp;select()why())~select()mul(534,617)?mul(763,508){from()when(22,266)+who() when()mul(204,352)when()mul(426,122)-&lt;*where()'$ why()mul(192,980)[(#[!$-}mul(798,208)''[!where()what()select()mul(295,727))#)}($&lt;?&lt;mul(452,502)(don't()mul(737,492)&gt;,$%where(539,126)what()when()select()'@mul(311,541),?don't()#select()!}!(}&amp;?mul(100,142)),-}%mul(222,856)~$;&gt;!from()where()mul(758,901)mul(757,796)mul(976,686);@'~+-{#who()mul(26,971);mul(404,362)^~who(417,106)what()#mul(186,691)from() %#+{/mul(67,433)-who()!-+!mul(184,469)*when()[&amp;when(458,221)&lt;$mul(163,556)^)]?,'}&amp;+who()mul(514,239)~)(mul(143,441)'how(741,776)~who(766,575)when();&gt;*^mul(281,143)+!&gt;;+:mul(767,44)#&lt;mul(490,849)&gt; when()why()don't()how()from()[from()from(){mul(436,519)what() *who();@{,&gt;do()%'mul(19,540)when()mul(643,539)~when(812,543)mul(527,639)-!mul(409,379)where()/(mul(168,491)#$&gt;]mul(432,333)@%&lt;when();{?what()^mul(819,413)'where(65,845)}-' ^@don't()?how()when()&gt;&gt;&lt;mul(591,832)where(600,755)]who()}do()!^-$what()from()select()'#mul(572,956)@#:what()from(),]mul(303,346) when()$$how()@%/#$mul(857,344)/what()where()mul(969,234)$!#when()&gt;&gt;&amp;who()(mul(113,494)%where()why()when()mul(659,592)&lt;why()!&lt;}mul(429,162)[who()*&gt;#(/'mul(72,670)when()^^mul(369,596)mul(631,168)-why()()[*}mul(330,968) $why()where()mul(230,139)don't()@)@&lt;mul(849,413)-when(){*?]mul(821,9)mul(753,277)]{&amp;when()%:mul(262,360)what()mul(65,276)don't()])who();where()$!,(-mul(952,221)+:/{where()where()mul(608,843)'&gt;where())%}where()&amp;,}mul(875,661)~don't()':why(){mul(793*:mul(399,702)!://select()@when()why()do()@mul(488,581{?{&amp;&lt;who(617,140)@how()mul(156,982)why()'&amp;&lt;where()*:{mul(452{-+$$*/mul(202,724)]#:#why()+??(#mul(607,2)@^mul(20,845)#{+#[/#~/mul(111,872)how()select()]&lt;how())'how()mul(921,254)$:;/where() ~why()}?mul(558,122)@how()&lt;&lt;who()mul(992,319)what(734,450)[^mul(498,490)/mul(632,639)when()]from(){why()]$[who(664,268)mul(401,695]!&gt;how()&amp;select()!&lt;'mul(912,311)why()! })@+}mul(128*mul(626,752)%mul(49,60)[,who()what()select()&lt;what()mul(24,8)&gt;)@@]*]why(937,788)from():mul(945,658)&lt;]don't()where()how(515,644)@+'select()how()mul(369,665)/],&lt;when(){( $how()mul(361,594)$select()&amp;:{:$when()mul(52,806) #from()@when()where():&gt;mul(263,185)where()^why()why()@what()mul(82,407)mul(464,537)[mul(871,333)^mul(560,227)-why()mul(966,203)$what()+where()#mul(101,21)}%how(),)^who()&gt;,select()mul(667,565)('what(),%select()(@mul(500,204:''&lt;~'why(477,559)&lt;do()&gt;)[where()mul(698,648);how(){&amp;?what()^@[%mul(280,395)&gt;~, mul-#/%:where()&gt;where():mul(170,746)don't()}($:@mul(998,876)*~&lt;[mul(121,366)-?#;how()&gt;from() ::mul(804,883)^-[  (:mul(100,354who(544,766)+,]&gt;!['/;mul(949,115)\"\n\n\n\n\n\n\nmul &lt;- str_extract_all(texte, \"mul\\\\(\\\\d+,\\\\d+\\\\)\") |&gt; \n  unlist() |&gt; \n   str_replace(\"mul\", \"`*`\")\nhead(mul,10)\n\n [1] \"`*`(858,892)\" \"`*`(380,985)\" \"`*`(340,11)\"  \"`*`(849,387)\" \"`*`(605,504)\"\n [6] \"`*`(771,783)\" \"`*`(111,830)\" \"`*`(329,797)\" \"`*`(125,409)\" \"`*`(390,37)\" \n\n\n\nmap_int(mul, function(x) parse(text = x) |&gt; eval()) |&gt; sum()\n\n[1] 173529487"
  },
  {
    "objectID": "2024/Day_3.html#challenge-part-2",
    "href": "2024/Day_3.html#challenge-part-2",
    "title": "Day 3 - Mull It Over",
    "section": "Challenge Part 2",
    "text": "Challenge Part 2\nAs you scan through the corrupted memory, you notice that some of the conditional statements are also still intact. If you handle some of the uncorrupted conditional statements in the program, you might be able to get an even more accurate result.\nThere are two new instructions you’ll need to handle:\n\nThe do() instruction enables future mul instructions.\nThe don't() instruction disables future mul instructions.\n\nOnly the most recent do() or don't() instruction applies. At the beginning of the program, mul instructions are enabled.\nFor example:\nxmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))\nThis corrupted memory is similar to the example from before, but this time the mul(5,5) and mul(11,8) instructions are disabled because there is a don't() instruction before them. The other mul instructions function normally, including the one at the end that gets re-enabled by a do()instruction.\nThis time, the sum of the results is 48 (2*4 + 8*5).\nHandle the new instructions; what do you get if you add up all of the results of just the enabled multiplications?\n\nRunning code\n\npaste(texte, collapse = \"\") |&gt;\n  str_remove_all(\"don't\\\\(\\\\).+?do\\\\(\\\\)\") |&gt; \n  str_extract_all(\"mul\\\\(\\\\d+,\\\\d+\\\\)\") |&gt; \n  unlist() |&gt; \n   str_replace(\"mul\", \"`*`\") |&gt; \n  map_int(function(x) parse(text = x) |&gt; eval()) |&gt; sum()\n\n[1] 99532691"
  },
  {
    "objectID": "2024/Day_1.html",
    "href": "2024/Day_1.html",
    "title": "Day 1 - Historian Hysteria",
    "section": "",
    "text": "The Chief Historian is always present for the big Christmas sleigh launch, but nobody has seen him in months! Last anyone heard, he was visiting locations that are historically significant to the North Pole; a group of Senior Historians has asked you to accompany them as they check the places they think he was most likely to visit.\nAs each location is checked, they will mark it on their list with a star. They figure the Chief Historian must be in one of the first fifty places they’ll look, so in order to save Christmas, you need to help them get fifty stars on their list before Santa takes off on December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou haven’t even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently empty. Eventually, someone decides that the best place to check first would be the Chief Historian’s office.\nUpon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?\nThroughout the Chief’s office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don’t miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.\nThere’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?\nFor example:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nMaybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nWithin each pair, figure out how far apart the two numbers are; you’ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.\nIn the example list above, the pairs and distances would be as follows:\n\nThe smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.\nThe second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.\nThe third-smallest number in both lists is 3, so the distance between them is 0.\nThe next numbers to pair up are 3 and 4, a distance of 1.\nThe fifth-smallest numbers in each list are 3 and 5, a distance of 2.\nFinally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.\n\nTo find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\n\n\n\nread_delim(\"input1.txt\", show_col_types = FALSE,\n         col_names = c(\"col1\",\"col3\", \"col4\", \"col2\")) |&gt;\n  select(col1, col2) -&gt; input\ninput\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 38450 56790\n 2 94765 36795\n 3 89694 26251\n 4 96083 99006\n 5 57068 30577\n 6 32031 60133\n 7 97652 26657\n 8 85752 40654\n 9 66117 44144\n10 29274 30512\n# ℹ 990 more rows\n\n\n\n\n\n\ninput |&gt;\n  arrange(col1) |&gt;\n  select(col1) -&gt; input1\ninput1\n\n# A tibble: 1,000 × 1\n    col1\n   &lt;dbl&gt;\n 1 10003\n 2 10072\n 3 10266\n 4 10383\n 5 10483\n 6 10498\n 7 10548\n 8 10589\n 9 10605\n10 10610\n# ℹ 990 more rows\n\n\n\ninput |&gt;\n  arrange(col2) |&gt;\n  select(col2) -&gt; input2\ninput2\n\n# A tibble: 1,000 × 1\n    col2\n   &lt;dbl&gt;\n 1 10051\n 2 10589\n 3 10589\n 4 10638\n 5 10699\n 6 10996\n 7 11025\n 8 11243\n 9 11820\n10 11918\n# ℹ 990 more rows\n\n\n\ninput1 |&gt;\n  mutate(input2, col2) -&gt; input3\ninput3\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051\n 2 10072 10589\n 3 10266 10589\n 4 10383 10638\n 5 10483 10699\n 6 10498 10996\n 7 10548 11025\n 8 10589 11243\n 9 10605 11820\n10 10610 11918\n# ℹ 990 more rows\n\n\n\ninput3 |&gt;\n  mutate(dif = abs(col1 - col2)) -&gt; input4\ninput4\n\n# A tibble: 1,000 × 3\n    col1  col2   dif\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051    48\n 2 10072 10589   517\n 3 10266 10589   323\n 4 10383 10638   255\n 5 10483 10699   216\n 6 10498 10996   498\n 7 10548 11025   477\n 8 10589 11243   654\n 9 10605 11820  1215\n10 10610 11918  1308\n# ℹ 990 more rows\n\n\n\ninput4 |&gt;\n  summarise(total = sum(dif))\n\n# A tibble: 1 × 1\n    total\n    &lt;dbl&gt;\n1 1666427"
  },
  {
    "objectID": "2024/Day_1.html#challenge-part-1",
    "href": "2024/Day_1.html#challenge-part-1",
    "title": "Day 1 - Historian Hysteria",
    "section": "",
    "text": "The Chief Historian is always present for the big Christmas sleigh launch, but nobody has seen him in months! Last anyone heard, he was visiting locations that are historically significant to the North Pole; a group of Senior Historians has asked you to accompany them as they check the places they think he was most likely to visit.\nAs each location is checked, they will mark it on their list with a star. They figure the Chief Historian must be in one of the first fifty places they’ll look, so in order to save Christmas, you need to help them get fifty stars on their list before Santa takes off on December 25th.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nYou haven’t even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently empty. Eventually, someone decides that the best place to check first would be the Chief Historian’s office.\nUpon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?\nThroughout the Chief’s office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don’t miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.\nThere’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?\nFor example:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nMaybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nWithin each pair, figure out how far apart the two numbers are; you’ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.\nIn the example list above, the pairs and distances would be as follows:\n\nThe smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.\nThe second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.\nThe third-smallest number in both lists is 3, so the distance between them is 0.\nThe next numbers to pair up are 3 and 4, a distance of 1.\nThe fifth-smallest numbers in each list are 3 and 5, a distance of 2.\nFinally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.\n\nTo find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\n\n\n\nread_delim(\"input1.txt\", show_col_types = FALSE,\n         col_names = c(\"col1\",\"col3\", \"col4\", \"col2\")) |&gt;\n  select(col1, col2) -&gt; input\ninput\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 38450 56790\n 2 94765 36795\n 3 89694 26251\n 4 96083 99006\n 5 57068 30577\n 6 32031 60133\n 7 97652 26657\n 8 85752 40654\n 9 66117 44144\n10 29274 30512\n# ℹ 990 more rows\n\n\n\n\n\n\ninput |&gt;\n  arrange(col1) |&gt;\n  select(col1) -&gt; input1\ninput1\n\n# A tibble: 1,000 × 1\n    col1\n   &lt;dbl&gt;\n 1 10003\n 2 10072\n 3 10266\n 4 10383\n 5 10483\n 6 10498\n 7 10548\n 8 10589\n 9 10605\n10 10610\n# ℹ 990 more rows\n\n\n\ninput |&gt;\n  arrange(col2) |&gt;\n  select(col2) -&gt; input2\ninput2\n\n# A tibble: 1,000 × 1\n    col2\n   &lt;dbl&gt;\n 1 10051\n 2 10589\n 3 10589\n 4 10638\n 5 10699\n 6 10996\n 7 11025\n 8 11243\n 9 11820\n10 11918\n# ℹ 990 more rows\n\n\n\ninput1 |&gt;\n  mutate(input2, col2) -&gt; input3\ninput3\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051\n 2 10072 10589\n 3 10266 10589\n 4 10383 10638\n 5 10483 10699\n 6 10498 10996\n 7 10548 11025\n 8 10589 11243\n 9 10605 11820\n10 10610 11918\n# ℹ 990 more rows\n\n\n\ninput3 |&gt;\n  mutate(dif = abs(col1 - col2)) -&gt; input4\ninput4\n\n# A tibble: 1,000 × 3\n    col1  col2   dif\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051    48\n 2 10072 10589   517\n 3 10266 10589   323\n 4 10383 10638   255\n 5 10483 10699   216\n 6 10498 10996   498\n 7 10548 11025   477\n 8 10589 11243   654\n 9 10605 11820  1215\n10 10610 11918  1308\n# ℹ 990 more rows\n\n\n\ninput4 |&gt;\n  summarise(total = sum(dif))\n\n# A tibble: 1 × 1\n    total\n    &lt;dbl&gt;\n1 1666427"
  },
  {
    "objectID": "2024/Day_1.html#challenge-part-2",
    "href": "2024/Day_1.html#challenge-part-2",
    "title": "Day 1 - Historian Hysteria",
    "section": "Challenge Part 2",
    "text": "Challenge Part 2\nYour analysis only confirmed what everyone feared: the two lists of location IDs are indeed very different.\nOr are they?\nThe Historians can’t agree on which group made the mistakes or how to read most of the Chief’s handwriting, but in the commotion you notice an interesting detail: a lot of location IDs appear in both lists! Maybe the other numbers aren’t location IDs at all but rather misinterpreted handwriting.\nThis time, you’ll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.\nHere are the same example lists again:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nFor these example lists, here is the process of finding the similarity score:\n\nThe first number in the left list is 3. It appears in the right list three times, so the similarity score increases by 3 * 3 = 9.\nThe second number in the left list is 4. It appears in the right list once, so the similarity score increases by 4 * 1 = 4.\nThe third number in the left list is 2. It does not appear in the right list, so the similarity score does not increase (2 * 0 = 0).\nThe fourth number, 1, also does not appear in the right list.\nThe fifth number, 3, appears in the right list three times; the similarity score increases by 9.\nThe last number, 3, appears in the right list three times; the similarity score again increases by 9.\n\nSo, for these example lists, the similarity score at the end of this process is 31 (9 + 4 + 0 + 0 + 9 + 9).\nOnce again consider your left and right lists. What is their similarity score?\n\nRunning code\n\ninput3\n\n# A tibble: 1,000 × 2\n    col1  col2\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 10003 10051\n 2 10072 10589\n 3 10266 10589\n 4 10383 10638\n 5 10483 10699\n 6 10498 10996\n 7 10548 11025\n 8 10589 11243\n 9 10605 11820\n10 10610 11918\n# ℹ 990 more rows\n\n\n\ninput |&gt; \n  mutate(occurences = map_int(col1, function(x) sum(x == input$col2))) -&gt; input5\ninput5\n\n# A tibble: 1,000 × 3\n    col1  col2 occurences\n   &lt;dbl&gt; &lt;dbl&gt;      &lt;int&gt;\n 1 38450 56790          0\n 2 94765 36795          0\n 3 89694 26251          0\n 4 96083 99006          0\n 5 57068 30577          6\n 6 32031 60133          0\n 7 97652 26657          0\n 8 85752 40654          0\n 9 66117 44144          0\n10 29274 30512          0\n# ℹ 990 more rows\n\n\n\ninput5 |&gt;\n  mutate(score = col1*occurences)\n\n# A tibble: 1,000 × 4\n    col1  col2 occurences  score\n   &lt;dbl&gt; &lt;dbl&gt;      &lt;int&gt;  &lt;dbl&gt;\n 1 38450 56790          0      0\n 2 94765 36795          0      0\n 3 89694 26251          0      0\n 4 96083 99006          0      0\n 5 57068 30577          6 342408\n 6 32031 60133          0      0\n 7 97652 26657          0      0\n 8 85752 40654          0      0\n 9 66117 44144          0      0\n10 29274 30512          0      0\n# ℹ 990 more rows\n\n\n\ninput5 |&gt;\n  mutate(score = col1*occurences) |&gt;\n  summarise(total = sum(score))\n\n# A tibble: 1 × 1\n     total\n     &lt;dbl&gt;\n1 24316233"
  },
  {
    "objectID": "2024/Day_2.html",
    "href": "2024/Day_2.html",
    "title": "Day 2 - Red-Nosed Reports",
    "section": "",
    "text": "Fortunately, the first location The Historians want to search isn’t a long walk from the Chief Historian’s office.\nWhile the Red-Nosed Reindeer nuclear fusion/fission plant appears to contain no sign of the Chief Historian, the engineers there run up to you as soon as they see you. Apparently, they still talk about the time Rudolph was saved through molecular synthesis from a single electron.\nThey’re quick to add that - since you’re already here - they’d really appreciate your help analyzing some unusual data from the Red-Nosed reactor. You turn to check if The Historians are waiting for you, but they seem to have already divided into groups that are currently searching every corner of the facility. You offer to help with the unusual data.\nThe unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:\n7 6 4 2 1\n1 2 7 8 9\n9 7 6 2 1\n1 3 2 4 5\n8 6 4 4 1\n1 3 6 7 9\nThis example data contains six reports each containing five levels.\nThe engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:\n\nThe levels are either all increasing or all decreasing.\nAny two adjacent levels differ by at least one and at most three.\n\nIn the example above, the reports can be found safe or unsafe by checking those rules:\n\n7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.\n1 2 7 8 9: Unsafe because 2 7 is an increase of 5.\n9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.\n1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.\n8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.\n1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.\n\nSo, in this example, 2 reports are safe.\nAnalyze the unusual data from the engineers. How many reports are safe?\n\n\n\nsuppressWarnings(read_lines(\"input2.txt\")) -&gt; input \nhead(input, 10)\n\n [1] \"14 15 13 14 17 20 21 26\" \"65 67 70 72 74 73\"      \n [3] \"32 35 37 39 39\"          \"28 31 34 35 38 39 43\"   \n [5] \"51 54 56 58 59 60 63 70\" \"77 78 80 81 80 82\"      \n [7] \"28 31 32 35 32 31\"       \"41 43 42 44 45 45\"      \n [9] \"41 42 39 41 42 44 48\"    \"24 25 27 27 28 29 31 32\"\n\n\n\n\n\n\ntibble(input = input) |&gt; \n  mutate(vec = map(input, function(x) str_split_1(x, \" \") |&gt; as.integer()),\n         diff = map(vec, diff),\n         sign = map(diff, sign),\n         descending = map_int(sign, function(x) sum(x == -1)),\n         ascending = map_int(sign, function(x) sum(x == 1)),\n         lg = map_int(vec, length)) -&gt; table1\ntable1\n\n# A tibble: 1,000 × 7\n   input                   vec       diff      sign   descending ascending    lg\n   &lt;chr&gt;                   &lt;list&gt;    &lt;list&gt;    &lt;list&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 14 15 13 14 17 20 21 26 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           1         6     8\n 2 65 67 70 72 74 73       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         4     6\n 3 32 35 37 39 39          &lt;int [5]&gt; &lt;int [4]&gt; &lt;dbl&gt;           0         3     5\n 4 28 31 34 35 38 39 43    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 5 51 54 56 58 59 60 63 70 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 6 77 78 80 81 80 82       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         4     6\n 7 28 31 32 35 32 31       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           2         3     6\n 8 41 43 42 44 45 45       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         3     6\n 9 41 42 39 41 42 44 48    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           1         5     7\n10 24 25 27 27 28 29 31 32 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         6     8\n# ℹ 990 more rows\n\n\n\ntable1 |&gt;\n  filter(descending == lg - 1 | ascending == lg - 1) -&gt; table2\ntable2\n\n# A tibble: 381 × 7\n   input                   vec       diff      sign   descending ascending    lg\n   &lt;chr&gt;                   &lt;list&gt;    &lt;list&gt;    &lt;list&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 28 31 34 35 38 39 43    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 2 51 54 56 58 59 60 63 70 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 3 40 41 42 43 44 48 51 52 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 4 7 10 14 17 20 24        &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           0         5     6\n 5 26 29 33 34 36 38 41 47 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 6 15 16 23 25 26 28 29    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 7 77 79 86 88 91 92 94 98 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 8 24 26 28 34 36 43       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           0         5     6\n 9 54 58 61 64 66          &lt;int [5]&gt; &lt;int [4]&gt; &lt;dbl&gt;           0         4     5\n10 52 56 58 61 63 64 67 71 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n# ℹ 371 more rows\n\n\n\ntable2 |&gt;\n  mutate(correct_diff = map_lgl(diff, function(x) all(abs(x) &lt;= 3 ))) |&gt; \n  filter(correct_diff) |&gt;\n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   218"
  },
  {
    "objectID": "2024/Day_2.html#challenge-part-1",
    "href": "2024/Day_2.html#challenge-part-1",
    "title": "Day 2 - Red-Nosed Reports",
    "section": "",
    "text": "Fortunately, the first location The Historians want to search isn’t a long walk from the Chief Historian’s office.\nWhile the Red-Nosed Reindeer nuclear fusion/fission plant appears to contain no sign of the Chief Historian, the engineers there run up to you as soon as they see you. Apparently, they still talk about the time Rudolph was saved through molecular synthesis from a single electron.\nThey’re quick to add that - since you’re already here - they’d really appreciate your help analyzing some unusual data from the Red-Nosed reactor. You turn to check if The Historians are waiting for you, but they seem to have already divided into groups that are currently searching every corner of the facility. You offer to help with the unusual data.\nThe unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:\n7 6 4 2 1\n1 2 7 8 9\n9 7 6 2 1\n1 3 2 4 5\n8 6 4 4 1\n1 3 6 7 9\nThis example data contains six reports each containing five levels.\nThe engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:\n\nThe levels are either all increasing or all decreasing.\nAny two adjacent levels differ by at least one and at most three.\n\nIn the example above, the reports can be found safe or unsafe by checking those rules:\n\n7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.\n1 2 7 8 9: Unsafe because 2 7 is an increase of 5.\n9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.\n1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.\n8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.\n1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.\n\nSo, in this example, 2 reports are safe.\nAnalyze the unusual data from the engineers. How many reports are safe?\n\n\n\nsuppressWarnings(read_lines(\"input2.txt\")) -&gt; input \nhead(input, 10)\n\n [1] \"14 15 13 14 17 20 21 26\" \"65 67 70 72 74 73\"      \n [3] \"32 35 37 39 39\"          \"28 31 34 35 38 39 43\"   \n [5] \"51 54 56 58 59 60 63 70\" \"77 78 80 81 80 82\"      \n [7] \"28 31 32 35 32 31\"       \"41 43 42 44 45 45\"      \n [9] \"41 42 39 41 42 44 48\"    \"24 25 27 27 28 29 31 32\"\n\n\n\n\n\n\ntibble(input = input) |&gt; \n  mutate(vec = map(input, function(x) str_split_1(x, \" \") |&gt; as.integer()),\n         diff = map(vec, diff),\n         sign = map(diff, sign),\n         descending = map_int(sign, function(x) sum(x == -1)),\n         ascending = map_int(sign, function(x) sum(x == 1)),\n         lg = map_int(vec, length)) -&gt; table1\ntable1\n\n# A tibble: 1,000 × 7\n   input                   vec       diff      sign   descending ascending    lg\n   &lt;chr&gt;                   &lt;list&gt;    &lt;list&gt;    &lt;list&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 14 15 13 14 17 20 21 26 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           1         6     8\n 2 65 67 70 72 74 73       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         4     6\n 3 32 35 37 39 39          &lt;int [5]&gt; &lt;int [4]&gt; &lt;dbl&gt;           0         3     5\n 4 28 31 34 35 38 39 43    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 5 51 54 56 58 59 60 63 70 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 6 77 78 80 81 80 82       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         4     6\n 7 28 31 32 35 32 31       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           2         3     6\n 8 41 43 42 44 45 45       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           1         3     6\n 9 41 42 39 41 42 44 48    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           1         5     7\n10 24 25 27 27 28 29 31 32 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         6     8\n# ℹ 990 more rows\n\n\n\ntable1 |&gt;\n  filter(descending == lg - 1 | ascending == lg - 1) -&gt; table2\ntable2\n\n# A tibble: 381 × 7\n   input                   vec       diff      sign   descending ascending    lg\n   &lt;chr&gt;                   &lt;list&gt;    &lt;list&gt;    &lt;list&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 28 31 34 35 38 39 43    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 2 51 54 56 58 59 60 63 70 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 3 40 41 42 43 44 48 51 52 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 4 7 10 14 17 20 24        &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           0         5     6\n 5 26 29 33 34 36 38 41 47 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 6 15 16 23 25 26 28 29    &lt;int [7]&gt; &lt;int [6]&gt; &lt;dbl&gt;           0         6     7\n 7 77 79 86 88 91 92 94 98 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n 8 24 26 28 34 36 43       &lt;int [6]&gt; &lt;int [5]&gt; &lt;dbl&gt;           0         5     6\n 9 54 58 61 64 66          &lt;int [5]&gt; &lt;int [4]&gt; &lt;dbl&gt;           0         4     5\n10 52 56 58 61 63 64 67 71 &lt;int [8]&gt; &lt;int [7]&gt; &lt;dbl&gt;           0         7     8\n# ℹ 371 more rows\n\n\n\ntable2 |&gt;\n  mutate(correct_diff = map_lgl(diff, function(x) all(abs(x) &lt;= 3 ))) |&gt; \n  filter(correct_diff) |&gt;\n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   218"
  },
  {
    "objectID": "2024/Day_2.html#challenge-part-2",
    "href": "2024/Day_2.html#challenge-part-2",
    "title": "Day 2 - Red-Nosed Reports",
    "section": "Challenge Part 2",
    "text": "Challenge Part 2\nThe engineers are surprised by the low number of safe reports until they realize they forgot to tell you about the Problem Dampener.\nThe Problem Dampener is a reactor-mounted module that lets the reactor safety systems tolerate a single bad level in what would otherwise be a safe report. It’s like the bad level never happened!\nNow, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.\nMore of the above example’s reports are now safe:\n\n7 6 4 2 1: Safe without removing any level.\n1 2 7 8 9: Unsafe regardless of which level is removed.\n9 7 6 2 1: Unsafe regardless of which level is removed.\n1 3 2 4 5: Safe by removing the second level, 3.\n8 6 4 4 1: Safe by removing the third level, 4.\n1 3 6 7 9: Safe without removing any level.\n\nThanks to the Problem Dampener, 4 reports are actually safe!\nUpdate your analysis by handling situations where the Problem Dampener can remove a single level from unsafe reports. How many reports are now safe?\n\nRunning code\n\nbadlevel &lt;- function(v) {\n  map(seq_along(v), function(x) v[-x])\n}\n\n\ntibble(input = input) |&gt; \n  mutate(vec = map(input, function(x) str_split_1(x, \" \") |&gt; as.integer()),\n         id = seq_along(input),\n         out = map(vec, badlevel)) |&gt; \n  unnest(out) -&gt; table3\ntable3\n\n# A tibble: 6,482 × 4\n   input                   vec          id out      \n   &lt;chr&gt;                   &lt;list&gt;    &lt;int&gt; &lt;list&gt;   \n 1 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 2 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 3 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 4 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 5 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 6 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 7 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 8 14 15 13 14 17 20 21 26 &lt;int [8]&gt;     1 &lt;int [7]&gt;\n 9 65 67 70 72 74 73       &lt;int [6]&gt;     2 &lt;int [5]&gt;\n10 65 67 70 72 74 73       &lt;int [6]&gt;     2 &lt;int [5]&gt;\n# ℹ 6,472 more rows\n\n\n\ntable3 |&gt; \n  mutate(diff = map(out, diff),\n         sign = map(diff, sign),\n         descending = map_int(sign, function(x) sum(x == -1)),\n         ascending = map_int(sign, function(x) sum(x == 1)),\n         lg = map_int(out, length)) -&gt; table4\ntable4\n\n# A tibble: 6,482 × 9\n   input                vec      id out   diff  sign  descending ascending    lg\n   &lt;chr&gt;                &lt;lis&gt; &lt;int&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 2 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 3 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 4 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 5 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 6 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 7 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 8 14 15 13 14 17 20 2… &lt;int&gt;     1 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         5     7\n 9 65 67 70 72 74 73    &lt;int&gt;     2 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         3     5\n10 65 67 70 72 74 73    &lt;int&gt;     2 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          1         3     5\n# ℹ 6,472 more rows\n\n\n\ntable4 |&gt;\n  filter(descending == lg - 1 | ascending == lg - 1) -&gt; table5\ntable5\n\n# A tibble: 3,076 × 9\n   input                vec      id out   diff  sign  descending ascending    lg\n   &lt;chr&gt;                &lt;lis&gt; &lt;int&gt; &lt;lis&gt; &lt;lis&gt; &lt;lis&gt;      &lt;int&gt;     &lt;int&gt; &lt;int&gt;\n 1 65 67 70 72 74 73    &lt;int&gt;     2 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         4     5\n 2 65 67 70 72 74 73    &lt;int&gt;     2 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         4     5\n 3 32 35 37 39 39       &lt;int&gt;     3 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         3     4\n 4 32 35 37 39 39       &lt;int&gt;     3 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         3     4\n 5 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n 6 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n 7 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n 8 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n 9 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n10 28 31 34 35 38 39 43 &lt;int&gt;     4 &lt;int&gt; &lt;int&gt; &lt;dbl&gt;          0         5     6\n# ℹ 3,066 more rows\n\n\n\ntable5 |&gt;\n  mutate(correct_diff = map_lgl(diff, function(x) all(abs(x) &lt;= 3 ))) |&gt; \n  filter(correct_diff) |&gt;\n  count(id) |&gt;\n  nrow()\n\n[1] 290"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "index",
    "section": "",
    "text": "Advent of Code are little puzzles."
  },
  {
    "objectID": "index.html#advent-of-code",
    "href": "index.html#advent-of-code",
    "title": "index",
    "section": "",
    "text": "Advent of Code are little puzzles."
  },
  {
    "objectID": "2023.html",
    "href": "2023.html",
    "title": "2023",
    "section": "",
    "text": "Jour 1 - Trebuchet?!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]